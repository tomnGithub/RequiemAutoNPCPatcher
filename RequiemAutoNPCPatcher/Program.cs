using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using DynamicData.Kernel;
using Mutagen.Bethesda;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Noggog;
using System.Text.RegularExpressions;
using System.Reflection;


// Function to initialize the matches dictionary with all keys set to 0


namespace RequiemAutoNPCPatcher;

public class Program
{
    private static Lazy<Settings> formSettings = null!;

    private static readonly DataTable DataTable = new();
    private static readonly DataTable DataTableRace = new();
    private static readonly DataTable DataTableVanillaRace = new();
    private static readonly DataTable DataTableMatchRace = new();
   // private static readonly DataTable DataTableLevelNPCs = new();
    //private static readonly DataTable DataTableLevelNPCs2 = new();
    private static FormKey formKeyPureMage;
    private static FormKey formKeyBattleMage;
    private static FormKey formKeyWarrior;
    private static FormKey FormKeyNewRace;
    private static string? warriorHealth;
    private static string? classIsWarrior;
    private static string? classIsPureMage;
    private static string? classIsBattleMage;







    private static string? classString1 =null;
    private static string? classString2 =null;
    private static string? classString3 =null;
    private static string? classString4 =null;
    private static string? classString5 =null;
    private static string? classString6 =null;
    private static string? classString7 =null;
    private static string? classString8 =null;
    private static string? classString9 =null;
    private static string? classString10=null;
    private static string? classString11=null;
    private static string? classString12=null;
    private static string? classString13 = null;
    private static string? forceKeyWord = null;
    private static string? forceKeyWordSpells = null;
    private static string? forceKeyWordHealth= null;
    private static string? playableRace = null;
    private static string? ignoreNPC = null;





    static void WriteToIniFile(string filePath, string text)
    {
        // Open the file for appending
        using (StreamWriter writer = new StreamWriter(filePath, true, Encoding.UTF8))
        {
            // Write the text to the file
            writer.WriteLine(text);
        }
    }
    static void ClearFile(string filePath)
    {
        // Open the file for writing and clear its content
        using (StreamWriter writer = new StreamWriter(filePath, false, Encoding.UTF8))
        {
            // Write nothing to the file (effectively clearing its content)
        }
    }

    public static Task<int> Main(string[] args)
    {
        return SynthesisPipeline.Instance
            .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
            .SetAutogeneratedSettings(
                "Settings",
                "Settings.json",
                out formSettings)
            .SetTypicalOpen(GameRelease.SkyrimSE, "RequiemAutoNPCPatcher.esp")
            .Run(args);
    }

    public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
    {
        if (formSettings.Value.TargetMods.Count == 0)
            //System.//Console.WriteLine("Must at least specify one target mod in order to do anything.");
            return;

        var npcGroups = state.LoadOrder.PriorityOrder.Reverse()
            .Select(listing => listing.Mod)
            .NotNull()
            .Select(x => (x.ModKey, x.Npcs))
            .Where(x => formSettings.Value.TargetMods.Contains(x.ModKey))
            .ToArray();


      

        Console.WriteLine("Patching NPCs and Races from the Selected Plugins:");
        foreach (var modKey in npcGroups.Select(x => x.ModKey))
        {
            Console.WriteLine($"  {modKey}");
        }
        var outputPath = $@"{state.DataFolderPath}\0RequiemAutoPatcher_DISTR.ini";
        
        ClearFile(outputPath);


        // For every Npc that exists
        ////System.//Console.WriteLine($"targetmods {Settings.Value.TargetMods.ToArray()} Npcs");
        ////System.//Console.WriteLine($"targetmods {npcGroups.Length} Npcs");

        //Vampire[KYWD: 000A82BB]
        // Create DataTable

        DataTableVanillaRace.Columns.Add("Race", typeof(string));
        DataTableVanillaRace.Columns.Add("Behavior", typeof(string));
        DataTableVanillaRace.Columns.Add("SH", typeof(int));
        DataTableVanillaRace.Columns.Add("SS", typeof(int));
        DataTableVanillaRace.Columns.Add("SM", typeof(int));
        DataTableVanillaRace.Columns.Add("formidRACE", typeof(string));
        var data = @"
DefaultRace,DefaultMale.hkx,50,50,50,013742:Skyrim.esm
DraugrRace,DraugrProject.hkx,50,0,80,000D53:Skyrim.esm
BearBrownRace,BearProject.hkx,200,0,150,0131E7:Skyrim.esm
BearBlackRace,BearProject.hkx,150,0,75,0131E8:Skyrim.esm
BearSnowRace,BearProject.hkx,200,0,100,0131E9:Skyrim.esm
ChaurusRace,ChaurusProject.hkx,125,4,100,0131EB:Skyrim.esm
ElkRace,DeerProject.hkx,50,0,25,0131ED:Skyrim.esm
DogRace,DogProject.hkx,10,0,20,0131EE:Skyrim.esm
DragonPriestRace,Dragon_Priest.hkx,1000,200,0,0131EF:Skyrim.esm
DwarvenCenturionRace,SteamProject.hkx,400,15,200,0131F1:Skyrim.esm
DwarvenSphereRace,SphereCenturion.hkx,200,0,10,0131F2:Skyrim.esm
DwarvenSpiderRace,DwarvenSpiderCenturionProject.hkx,150,5,50,0131F3:Skyrim.esm
AtronachFlameRace,AtronachFlame.hkx,75,100,50,0131F5:Skyrim.esm
AtronachFrostRace,AtronachFrostProject.hkx,250,0,200,0131F6:Skyrim.esm
AtronachStormRace,AtronachStormProject.hkx,200,100,100,0131F7:Skyrim.esm
FrostbiteSpiderRace,FrostbiteSpiderProject.hkx,15,4,25,0131F8:Skyrim.esm
GiantRace,GiantProject.hkx,250,0,100,0131F9:Skyrim.esm
GoatRace,GoatProject.hkx,25,0,25,0131FA:Skyrim.esm
HagravenRace,HagravenProject.hkx,300,150,50,0131FB:Skyrim.esm
HorkerRace,HorkerProject.hkx,150,0,150,0131FC:Skyrim.esm
HorseRace,HorseProject.hkx,250,0,100,0131FD:Skyrim.esm
IceWraithRace,IceWraithProject.hkx,100,50,200,0131FE:Skyrim.esm
MammothRace,MammothProject.hkx,500,0,100,0131FF:Skyrim.esm
SabreCatRace,SabreCatProject.hkx,100,0,100,013200:Skyrim.esm
SkeeverRace,SkeeverProject.hkx,15,0,15,013201:Skyrim.esm
SabreCatSnowyRace,SabreCatProject.hkx,175,0,100,013202:Skyrim.esm
SlaughterfishRace,SlaughterfishProject.hkx,35,0,25,013203:Skyrim.esm
TrollRace,TrollProject.hkx,150,0,100,013205:Skyrim.esm
TrollFrostRace,TrollProject.hkx,250,0,125,013206:Skyrim.esm
WispRace,WispProject.hkx,50,50,50,013208:Skyrim.esm
WitchlightRace,WitchlightProject.hkx,50,50,50,013209:Skyrim.esm
WolfRace,WolfProject.hkx,12,0,200,01320A:Skyrim.esm
FrostbiteSpiderRaceGiant,FrostbiteSpiderProject.hkx,250,4,50,04E507:Skyrim.esm
CowRace,HighlandCowProject.hkx,15,0,25,04E785:Skyrim.esm
FrostbiteSpiderRaceLarge,FrostbiteSpiderProject.hkx,100,4,100,053477:Skyrim.esm
ChaurusReaperRace,ChaurusProject.hkx,150,4,150,0A5601:Skyrim.esm
SkeletonRace,DraugrSkeletonProject.hkx,20,0,80,0B7998:Skyrim.esm
SkeletonRace,DraugrProject.hkx,20,0,80,0B7998:Skyrim.esm
RigidSkeletonRace,null.hkx,-99999,0,-99999,000B9FD7:Skyrim.esm
SkeletonArmorRace,null.hkx,-99999,0,-99999,020023E2:Skyrim.esm
SkeletonNecroRace,null.hkx,-99999,0,-99999,020023E2:Skyrim.esm
MudcrabRace,MudcrabProject.hkx,25,4,25,0BA545:Skyrim.esm
HareRace,HareProject.hkx,5,0,25,06DC99:Skyrim.esm
ChickenRace,ChickenProject.hkx,5,0,25,0A919D:Skyrim.esm
MagicAnomalyRace,IceWraithProject.hkx,100,50,200,0B6F95:Skyrim.esm
CartHorseRace,HorseProject.hkx,100,0,200,0DE505:Skyrim.esm
SkeletonNecroPriestRace,Dragon_Priest.hkx,50,50,50,0EBE18:Skyrim.esm
C06WolfSpiritRace,WolfProject.hkx,250,0,200,106C10:Skyrim.esm
FalmerRace,FalmerProject.hkx,100,100,150,0131F4:Skyrim.esm
SprigganRace,Spriggan.hkx,125,150,50,013204:Skyrim.esm
SprigganMatronRace,null.hkx,-99999,-99999,-99999,0F3903:Skyrim.esm
SprigganEarthMotherRace,null.hkx,-99999,-99999,-99999,013B77:Dawnguard.esm
DLC1UndeadDragonRace,DragonProject.hkx,900,150,150,0117DE:Dawnguard.esm
DLC1GargoyleVariantBossRace,VampireBruteProject.hkx,400,0,150,010D00:Dawnguard.esm
DLC1GargoyleVariantGreenRace,VampireBruteProject.hkx,100,0,50,019D86:Dawnguard.esm
DLC1DeathHoundRace,WolfProject.hkx,75,0,100,00C5F0:Dawnguard.esm
DLC1GargoyleRace,VampireBruteProject.hkx,200,0,100,00A2C6:Dawnguard.esm
DLC1SoulCairnSkeletonNecroRace,DraugrProject.hkx,30,0,80,006AFA:Dawnguard.esm
DLC1ChaurusHunterRace,ChaurusFlyer.hkx,125,50,100,0051FB:Dawnguard.esm
DLC1DeathHoundCompanionRace,WolfProject.hkx,100,0,100,003D02:Dawnguard.esm
DLC1VampireBeastRace,VampireLord.hkx,300,200,100,00283A:Dawnguard.esm
WerewolfBeastRace,WerewolfBeastProject.hkx,100,0,100,0CDD84:Skyrim.esm
DLC2ExpSpiderBaseRace,FrostbiteSpiderProject.hkx,1,4,25,014449:Dragonborn.esm
DLC2LurkerRace,BenthicLurkerProject.hkx,550,15,100,014495:Dragonborn.esm
DLC2MountedRieklingRace,BoarProject.hkx,250,0,100,0179CF:Dragonborn.esm
DLC2RieklingRace,RieklingProject.hkx,50,0,50,017F44:Dragonborn.esm
DragonRace,DragonProject.hkx,500,150,100,012E82:Skyrim.esm
DLC2SprigganBurntRace,Spriggan.hkx,325,150,50,01B644:Dragonborn.esm
DLC2AshHopperRace,ScribProject.hkx,125,0,120,01B658:Dragonborn.esm
AlduinRace,DragonProject.hkx,750,50,50,0E7713:Skyrim.esm
UndeadDragonRace,DragonProject.hkx,500,150,100,1052A3:Skyrim.esm
DLC2SeekerRace,HMDaedra.hkx,350,200,0,01DCB9:Dragonborn.esm
DLC2WerebearBeastRace,WerewolfBeastProject.hkx,500,0,250,01E17B:Dragonborn.esm
dlc2SpectralDragonRace,IceWraithProject.hkx,200,50,200,01F98F:Dragonborn.esm
DLC2NetchRace,NetchProject.hkx,500,0,150,01FEB8:Dragonborn.esm
DLC2BoarRace,BoarProject.hkx,200,0,50,024038:Dragonborn.esm
DLC2NetchCalfRace,NetchProject.hkx,150,0,50,028580:Dragonborn.esm
DLC2DwarvenBallistaRace,BallistaCenturion.hkx,200,0,10,02B014:Dragonborn.esm
DLC2RigidSkeletonRace,null.hkx,-99999,-99999,-99999,03CECB:Dragonborn.esm
DLC2MiraakRace,null.hkx,-99999,-99999,-99999,03CA97:Dragonborn.esm
DLC2FakeCoffinRace,null.hkx,-99999,-99999,-99999,03C35F:Dragonborn.esm
DLC2AcolyteDragonPriestRace,null.hkx,-99999,-99999,-99999,03911A:Dragonborn.esm
DLC2DremoraRace,null.hkx,-99999,-99999,-99999,035538:Dragonborn.esm
DLC2DragonBlackRace,null.hkx,-99999,-99999,-99999,02C88C:Dragonborn.esm
DragonBlackRace,null.hkx,-99999,-99999,-99999,02C88B:Dragonborn.esm
DLC2DwarvenBallistaRace,null.hkx,-99999,-99999,-99999,02B014:Dragonborn.esm
DLC2HulkingDraugrRace,null.hkx,-99999,-99999,-99999,02A6FD:Dragonborn.esm
DLC2dunInstrumentsRace,null.hkx,-99999,-99999,-99999,029EFC:Dragonborn.esm
DLC2dunKarstaagIceWraithRace,null.hkx,-99999,-99999,-99999,029EE7:Dragonborn.esm
dlc2AshGuardianRace,null.hkx,-99999,-99999,-99999,027BFC:Dragonborn.esm
DLC2ExpSpiderPackmuleRace,null.hkx,-99999,-99999,-99999,027483:Dragonborn.esm
DLC2GhostFrostGiantRace,null.hkx,-99999,-99999,-99999,01CAD8:Dragonborn.esm
DLC2MudcrabSolstheimRace,null.hkx,-99999,-99999,-99999,01B647:Dragonborn.esm
DLC2AshSpawnRace,null.hkx,-99999,-99999,-99999,01B637:Dragonborn.esm
DLC2ThirskRieklingRace,null.hkx,-99999,-99999,-99999,01A50A:Dragonborn.esm
NordRaceVampire,null.hkx,-99999,-99999,-99999,088794:Skyrim.esm
BretonRaceVampire,null.hkx,-99999,-99999,-99999,08883C:Skyrim.esm
DarkElfRaceVampire,null.hkx,-99999,-99999,-99999,08883D:Skyrim.esm
HighElfRaceVampire,null.hkx,-99999,-99999,-99999,088840:Skyrim.esm
ImperialRaceVampire,null.hkx,-99999,-99999,-99999,088844:Skyrim.esm
KhajiitRaceVampire,null.hkx,-99999,-99999,-99999,088845:Skyrim.esm
RedguardRaceVampire,null.hkx,-99999,-99999,-99999,088846:Skyrim.esm
WoodElfRaceVampire,null.hkx,-99999,-99999,-99999,088884:Skyrim.esm
SprigganSwarmRace,null.hkx,-99999,-99999,-99999,09AA44:Skyrim.esm
OrcRaceVampire,null.hkx,-99999,-99999,-99999,0A82B9:Skyrim.esm
DLC1SoulCairnSoulWispRace,null.hkx,-99999,-99999,-99999,002AE0:Dawnguard.esm
SnowElfRace,null.hkx,-99999,-99999,-99999,00377D:Dawnguard.esm
DLC1HuskyArmoredCompanionRace,null.hkx,-99999,-99999,-99999,003D01:Dawnguard.esm
testDraugrRace,null.hkx,-99999,-99999,-99999,00483B:Dawnguard.esm
TestRace,null.hkx,-99999,-99999,-99999,004D31:Dawnguard.esm
DLC1SoulCairnKeeperRace,null.hkx,-99999,-99999,-99999,007AF3:Dawnguard.esm
DLC1SoulCairnSkeletonArmorRace,null.hkx,-99999,-99999,-99999,00894D:Dawnguard.esm
DLC01SoulCairnBonemanRace,null.hkx,-99999,-99999,-99999,00A94B:Dawnguard.esm
DLC1DeerGlowRace,null.hkx,-99999,-99999,-99999,00D0B2:Dawnguard.esm
DLC1SabreCatGlowRace,null.hkx,-99999,-99999,-99999,00D0B6:Dawnguard.esm
DLC1NordRace,null.hkx,-99999,-99999,-99999,00E88A:Dawnguard.esm
DLC1TrollFrostRaceArmored,null.hkx,-99999,-99999,-99999,0117F4:Dawnguard.esm
DLC1TrollRaceArmored,null.hkx,-99999,-99999,-99999,0117F5:Dawnguard.esm
DLC1HuskyBareCompanionRace,null.hkx,-99999,-99999,-99999,0122B7:Dawnguard.esm
DLC1_BF_ChaurusRace,null.hkx,-99999,-99999,-99999,015136:Dawnguard.esm
DLC1LD_ForgemasterRace,null.hkx,-99999,-99999,-99999,015C34:Dawnguard.esm
DLC1HuskyArmoredRace,null.hkx,-99999,-99999,-99999,018B33:Dawnguard.esm
DLC1HuskyBareRace,null.hkx,-99999,-99999,-99999,018B36:Dawnguard.esm
DLC1BlackSkeletonRace,null.hkx,-99999,-99999,-99999,019FD3:Dawnguard.esm
FalmerFrozenVampRace,null.hkx,-99999,-99999,-99999,01AACC:Dawnguard.esm
ArgonianRace,null.hkx,-99999,-99999,-99999,013740:Skyrim.esm
ArgonianRaceVampire,null.hkx,-99999,-99999,-99999,08883A:Skyrim.esm
BretonRace,null.hkx,-99999,-99999,-99999,013741:Skyrim.esm
DarkElfRace,null.hkx,-99999,-99999,-99999,013742:Skyrim.esm
HighElfRace,null.hkx,-99999,-99999,-99999,013743:Skyrim.esm
ImperialRace,null.hkx,-99999,-99999,-99999,013744:Skyrim.esm
KhajiitRace,null.hkx,-99999,-99999,-99999,013745:Skyrim.esm
NordRace,null.hkx,-99999,-99999,-99999,013746:Skyrim.esm
OrcRace,null.hkx,-99999,-99999,-99999,013747:Skyrim.esm
RedguardRace,null.hkx,-99999,-99999,-99999,013748:Skyrim.esm
WoodElfRace,null.hkx,-99999,-99999,-99999,013749:Skyrim.esm
FoxRace,null.hkx,-99999,-99999,-99999,109C7C:Skyrim.esm
BretonRaceChildVampire,null.hkx,-99999,-99999,-99999,108272:Skyrim.esm
ManakinRace,null.hkx,-99999,-99999,-99999,10760A:Skyrim.esm
WhiteStagRace,null.hkx,-99999,-99999,-99999,104F45:Skyrim.esm
MG07DogRace,null.hkx,-99999,-99999,-99999,0F905F:Skyrim.esm
DraugrMagicRace,null.hkx,-99999,-99999,-99999,0F71DC:Skyrim.esm
DogCompanionRace,null.hkx,-99999,-99999,-99999,0F1AC4:Skyrim.esm
WispShadeRace,null.hkx,-99999,-99999,-99999,0F1182:Skyrim.esm
DA03BarbasDogRace,null.hkx,-99999,-99999,-99999,0CD657:Skyrim.esm
DA13AfflictedRace,null.hkx,-99999,-99999,-99999,097A3D:Skyrim.esm
NordRaceAstrid,null.hkx,-99999,-99999,-99999,07EAF3:Skyrim.esm
DeerRace,null.hkx,-99999,-99999,-99999,0CF89B:Skyrim.esm
C00GiantOutsideWhiterunRace,null.hkx,-99999,-99999,-99999,0CAE13:Skyrim.esm
SkeeverWhiteRace,null.hkx,-99999,-99999,-99999,0C3EDF:Skyrim.esm
ElderRaceVampire,null.hkx,-99999,-99999,-99999,0A82BA:Skyrim.esm
dunMiddenEmptyRace,null.hkx,-99999,-99999,-99999,0B214B:Skyrim.esm
SwarmRace,null.hkx,-99999,-99999,-99999,09AA3C:Skyrim.esm
InvisibleRace,null.hkx,-99999,-99999,-99999,071E6A:Skyrim.esm
GoatDomesticsRace,null.hkx,-99999,-99999,-99999,06FC4A:Skyrim.esm
ElderRace,null.hkx,-99999,-99999,-99999,067CD8:Skyrim.esm
BretonRaceChild,null.hkx,-99999,-99999,-99999,02C65C:Skyrim.esm
NordRaceChild,null.hkx,-99999,-99999,-99999,02C65B:Skyrim.esm
RedguardRaceChild,null.hkx,-99999,-99999,-99999,02C65A:Skyrim.esm
ImperialRaceChild,null.hkx,-99999,-99999,-99999,02C659:Skyrim.esm
DremoraRace,null.hkx,-99999,-99999,-99999,0131F0:Skyrim.esm
";
        //to differantate spriggions us fx data
        //DremoraRace,DefaultMale.hkx,50,50,50,0131F0:Skyrim.esm
        // Split data by lines
        var lines = data.Split('\n', StringSplitOptions.RemoveEmptyEntries);

        // Process each line (skipping header)
        for (var i = 1; i < lines.Length; i++)
        {
            // Split line by commas
            object?[] parts = lines[i].Split(',');

            // Add row to DataTable
            DataTableVanillaRace.Rows.Add(parts);
        }

       


        DataTable.Columns.Add("FormKey", typeof(string));
        DataTable.Columns.Add("EditorID", typeof(string));
        DataTable.Columns.Add("Result", typeof(string));
        DataTable.Columns.Add("hmsweight", typeof(string));
        DataTable.Columns.Add("ClassArchType", typeof(string));
        DataTable.Columns.Add("SumWarrior", typeof(int)); // Assuming these are integers
        DataTable.Columns.Add("SumThief", typeof(int));
        DataTable.Columns.Add("SumMage", typeof(int));
        DataTable.Columns.Add("PrefArmor", typeof(string)); // Assuming these are strings
        DataTable.Columns.Add("ClassArchTypeNoArm", typeof(string));
        DataTable.Columns.Add("closestvalue", typeof(double));
        DataTableRace.Columns.Add("FormKey", typeof(string));
        DataTableRace.Columns.Add("KeywordActorTypeNPC", typeof(string));
        DataTableRace.Columns.Add("KeywordActorTypeVampire", typeof(string));
        DataTableRace.Columns.Add("Behave", typeof(string));
        DataTableMatchRace.Columns.Add("OriginalRace", typeof(string));
        DataTableMatchRace.Columns.Add("Match", typeof(string));
        DataTableMatchRace.Columns.Add("MatchEDID", typeof(string));
        DataTableMatchRace.Columns.Add("FromNewRace", typeof(int));


        if (formSettings.Value.WarriorHealthPerLevel != 5.5)
        {
            var spellHealthPerLevelWarrior = new FormLink<ISpellGetter>(FormKey.Factory("00088C:RequiemPatcherKeyword.esp"));
            IFormLinkGetter<ISpellRecordGetter> spellHealthPerLevelWarriorLink = spellHealthPerLevelWarrior;
            var spellHealthPerLevelWarriorGetter = spellHealthPerLevelWarriorLink.Resolve(state.LinkCache);
            var modifedWarriorHealth = state.PatchMod.Spells.GetOrAddAsOverride(spellHealthPerLevelWarriorGetter);

            foreach (var effect in modifedWarriorHealth.Effects)
            {
                if (effect.Data != null)
                {
                    effect.Data.Magnitude = (float)formSettings.Value.WarriorHealthPerLevel;
                }
            }
        }


        if (formSettings.Value.PureMageHealthPerLevel != 3)
        {
            var spellHealthPerLevelPureMage = new FormLink<ISpellGetter>(FormKey.Factory("0008AB:RequiemPatcherKeyword.esp"));
            IFormLinkGetter<ISpellRecordGetter> spellHealthPerLevelPureMageLink = spellHealthPerLevelPureMage;
            var spellHealthPerLevelPureMageGetter = spellHealthPerLevelPureMageLink.Resolve(state.LinkCache);
            var modifedPureMageHealth = state.PatchMod.Spells.GetOrAddAsOverride(spellHealthPerLevelPureMageGetter);

            foreach (var effect in modifedPureMageHealth.Effects)
            {
                if (effect.Data != null)
                {
                    effect.Data.Magnitude = (float)formSettings.Value.PureMageHealthPerLevel;
                }
            }
        }
        

        if (formSettings.Value.StaminaPerLevel != 8.5)
        {
            var spellStaminaPerLevel = new FormLink<ISpellGetter>(FormKey.Factory("0008AA:RequiemPatcherKeyword.esp"));
            IFormLinkGetter<ISpellRecordGetter> spellStaminaPerLevelLink = spellStaminaPerLevel;
            var spellStaminaPerLevelGetter = spellStaminaPerLevelLink.Resolve(state.LinkCache);
            var modifedStamina = state.PatchMod.Spells.GetOrAddAsOverride(spellStaminaPerLevelGetter);

            foreach (var effect in modifedStamina.Effects)
            {
                if (effect.Data != null)
                {
                    effect.Data.Magnitude = (float)formSettings.Value.StaminaPerLevel;
                }
            }
        }
        

        if (formSettings.Value.MagickaPerLevel != 8.5)
        {
            var spellMagickaPerLevel = new FormLink<ISpellGetter>(FormKey.Factory("0008A9:RequiemPatcherKeyword.esp"));
            IFormLinkGetter<ISpellRecordGetter> spellMagickaPerLevelLink = spellMagickaPerLevel;
            var spellMagickaPerLevelGetter = spellMagickaPerLevelLink.Resolve(state.LinkCache);
            var modifedMagicka = state.PatchMod.Spells.GetOrAddAsOverride(spellMagickaPerLevelGetter);

            foreach (var effect in modifedMagicka.Effects)
            {
                if (effect.Data != null)
                {
                    effect.Data.Magnitude = (float)formSettings.Value.MagickaPerLevel;
                }
            }
        }
          




        foreach (var raace in state.LoadOrder.PriorityOrder.Race().WinningOverrides())
        {
            var filePath = raace.BehaviorGraph?.Male?.File.ToString();
            // string? filePathF = raace.BehaviorGraph?.Female?.File.ToString();

            var behaviorString = "none";
            if (filePath != null)
            {
                var lastIndex = filePath.LastIndexOf('\\');
                // If '\' is found, extract the substring after it
                if (lastIndex != -1)
                {
                    var substringBeh = filePath.Substring(lastIndex + 1);
                    //  //Console.WriteLine(substringBeh);
                    behaviorString = substringBeh;
                }
              
            }

            DataTableRace.Rows.Add(raace.FormKey, raace.Flags.HasFlag(Race.Flag.Playable), raace.HasKeyword(Skyrim.Keyword.Vampire), behaviorString);
            if (raace.Flags.HasFlag(Race.Flag.Playable) == true)
            {
                playableRace += ",0x00" + raace.FormKey.ToString().Replace(":", "~"); ;
            }


            var raceAddedToDf = 0;
            foreach (var pluginss in npcGroups.Select(x => x.ModKey.FileName))
                //FileName exfileName = dudeThing.ModKey.FileName;
                //   //System.//Console.WriteLine($"  {modKey.ToString()}");
                // //System.//Console.WriteLine($"is being compared to {dudeThing.ToString()} ");
                if (raace.FormKey.ModKey == pluginss)
                {
                 




                    float modSh;
                    float modSs;
                    float modSm;


                    DataRow? smallestDiffRow = null;
                    var smallestDiff = double.MaxValue;
              
                    var raceFormString = "none";

                    // //Console.WriteLine("8888888888888888888888888888888888888888888888888888888888"+ behaviorString);
                    foreach (DataRow row in DataTableVanillaRace.Rows)
                        if (row.Field<string>("Behavior") == behaviorString)
                        {
                            raace.Starting.TryGetValue(BasicStat.Health, out modSh);
                            raace.Starting.TryGetValue(BasicStat.Magicka, out modSm);
                            raace.Starting.TryGetValue(BasicStat.Stamina, out modSs);

                            double modShint = modSh;
                            double ogSh = row.Field<int>("SH");
                            double ogSs = row.Field<int>("SS");
                            double ogSm = row.Field<int>("SM");
                            if (ogSh == 0) ogSh = 1;
                            if (ogSs == 0) ogSs = 1;
                            if (ogSm == 0) ogSm = 1;


                            var shDiff = Math.Abs((modShint - ogSh) / ogSh);


                            // Check if the current shDIFF is smaller than the smallestDiff
                            if (shDiff < smallestDiff)
                            {
                                raceFormString = row.Field<string>("formidRACE");
                                smallestDiff = shDiff;
                                smallestDiffRow = row;
                            
                            }
                        }

                    // Print the row with the smallest shDIFF if found
                    if (smallestDiffRow != null)
                    {
                        var raceVoiceFForm = raace.Voices?.Female.ToString();
                        var raceVoiceMForm = raace.Voices?.Male.ToString();

                        if (raceVoiceMForm?.Substring(0, 17) == "01F1CE:Skyrim.esm" &&
                            raceVoiceFForm?.Substring(0, 17) == "013ADD:Skyrim.esm")
                            raceFormString = "0131F0:Skyrim.esm";

                       
                        var originalRace = new FormLink<IRaceGetter>(FormKey.Factory(raceFormString));


                        //IRaceGetter raceGetter = OriginalRace.Value;
                        IFormLinkGetter<IRaceGetter> raceLink = originalRace;
                        var raceGetter = raceLink.Resolve(state.LinkCache);

                        raceGetter.Starting.TryGetValue(BasicStat.Health, out var reqRaceSh);
                        raceGetter.Starting.TryGetValue(BasicStat.Magicka, out var reqRaceSm);
                        raceGetter.Starting.TryGetValue(BasicStat.Stamina, out var reqRaceSs);
                        raace.Starting.TryGetValue(BasicStat.Health, out var modRaceSh);
                        raace.Starting.TryGetValue(BasicStat.Magicka, out var modRaceSm);
                        raace.Starting.TryGetValue(BasicStat.Stamina, out var modRaceSs);

                        if (modRaceSh > reqRaceSh) reqRaceSh = modRaceSh;
                        if (modRaceSm > reqRaceSm) reqRaceSm = modRaceSm;
                        if (modRaceSs > reqRaceSs) reqRaceSs = modRaceSs;

                        var reqBaseMass = raceGetter.BaseMass;
                        var reqUnarmDam = raceGetter.UnarmedDamage;


                        var reqUnarmReach = raceGetter.UnarmedReach;

                        var modifiedRace = state.PatchMod.Races.GetOrAddAsOverride(raace);

                        if (!modifiedRace.Flags.HasFlag(Race.Flag.Playable))
                        {
                            modifiedRace.Starting.Set(BasicStat.Health, reqRaceSh);
                      
                            modifiedRace.Starting.Set(BasicStat.Stamina, reqRaceSs);

                         
                            modifiedRace.Starting.Set(BasicStat.Magicka, reqRaceSm);
                          
                            if (modifiedRace.UnarmedDamage > reqUnarmDam) reqUnarmDam = modifiedRace.UnarmedDamage;

                            modifiedRace.UnarmedDamage = reqUnarmDam;
                            modifiedRace.UnarmedReach = reqUnarmReach;
                            modifiedRace.BaseMass = reqBaseMass;
                            modifiedRace.Regen[BasicStat.Health] = raceGetter.Regen[BasicStat.Health];
                            modifiedRace.Regen[BasicStat.Magicka] = raceGetter.Regen[BasicStat.Magicka];
                            modifiedRace.Regen[BasicStat.Stamina] = raceGetter.Regen[BasicStat.Stamina];
                        }
                       

                        DataTableMatchRace.Rows.Add(raace.EditorID, raceGetter.FormKey, raceGetter.EditorID, 1);
                        raceAddedToDf = 1;

                        Dictionary<string, int> raceFlags = new Dictionary<string, int>
                {
                    { "AtronachFlameRace", 0 }, { "AtronachFrostRace", 0 }, { "AtronachStormRace", 0 },
                    { "BearBrownRace", 0 }, { "BearBlackRace", 0 }, { "BearSnowRace", 0 },
                    { "DLC2MountedRieklingRace", 0 }, { "DLC2BoarRace", 0 }, { "DLC2FakeCoffinRace", 0 },
                    { "ChaurusRace", 0 }, { "ChaurusReaperRace", 0 }, { "DLC1ChaurusHunterRace", 0 },
                    { "ChickenRace", 0 }, { "ElkRace", 0 }, { "DefaultRace", 0 }, { "DarkElfRace", 0 },
                    { "DA13AfflictedRace", 0 }, { "DremoraRace", 0 }, { "ImperialRaceChild", 0 },
                    { "MagicAnomalyRace", 0 }, { "AlduinRace", 0 }, { "UndeadDragonRace", 0 }, { "DogRace", 0 },
                    { "DLC1DeathHoundRace", 0 }, { "DLC1DeathHoundCompanionRace", 0 },
                    { "DragonPriestRace", 0 }, { "SkeletonNecroPriestRace", 0 }, { "DLC1UndeadDragonRace", 0 },
                    { "DragonRace", 0 }, { "DraugrRace", 0 }, { "SkeletonRace", 0 },
                    { "RigidSkeletonRace", 0 }, { "SkeletonArmorRace", 0 }, { "SkeletonNecroRace", 0 },
                    { "DLC1SoulCairnSkeletonNecroRace", 0 }, { "DwarvenSpiderRace", 0 },
                    { "FalmerRace", 0 }, { "FrostbiteSpiderRace", 0 }, { "FrostbiteSpiderRaceGiant", 0 },
                    { "FrostbiteSpiderRaceLarge", 0 }, { "DLC2ExpSpiderBaseRace", 0 },
                    { "GiantRace", 0 }, { "C00GiantOutsideWhiterunRace", 0 }, { "DLC2LurkerRace", 0 },
                    { "DLC2SeekerRace", 0 }, { "GoatRace", 0 }, { "HagravenRace", 0 },
                    { "HareRace", 0 }, { "CowRace", 0 }, { "HorkerRace", 0 }, { "HorseRace", 0 },
                    { "CartHorseRace", 0 }, { "IceWraithRace", 0 }, { "dlc2SpectralDragonRace", 0 },
                    { "MammothRace", 0 }, { "MudcrabRace", 0 }, { "DLC2NetchRace", 0 }, { "DLC2NetchCalfRace", 0 },
                    { "DLC2RieklingRace", 0 }, { "DLC2ThirskRieklingRace", 0 },
                    { "SabreCatRace", 0 }, { "SabreCatSnowyRace", 0 }, { "SkeeverRace", 0 }, { "DLC2AshHopperRace", 0 },
                    { "SlaughterfishRace", 0 }, { "DwarvenSphereRace", 0 },
                    { "SprigganRace", 0 }, { "SprigganMatronRace", 0 }, { "SprigganEarthMotherRace", 0 },
                    { "DLC2SprigganBurntRace", 0 }, { "DwarvenCenturionRace", 0 },
                    { "TrollRace", 0 }, { "TrollFrostRace", 0 }, { "DLC1VampireBeastRace", 0 },
                    { "DLC1GargoyleVariantBossRace", 0 }, { "DLC1GargoyleVariantGreenRace", 0 },
                    { "DLC1GargoyleRace", 0 }, { "WerewolfBeastRace", 0 }, { "DLC2WerebearBeastRace", 0 },
                    { "WispRace", 0 }, { "WitchlightRace", 0 }, { "WolfRace", 0 },
                    { "C06WolfSpiritRace", 0 }, { "DLC2DwarvenBallistaRace", 0 }
                };

                        string? raceString = raceGetter.EditorID;

                        FormKeyNewRace = FormKey.Factory("000817:RequiemPatcherKeyword.esp");
                        if (raceString != null && raceFlags.ContainsKey(raceString))
                        {
                            raceFlags[raceString] = 1;
                        }

                        foreach (var kvp in raceFlags)
                            if (kvp.Value == 1)
                                switch (kvp.Key)
                                {
                                    case "AtronachFlameRace":
                                        FormKeyNewRace = FormKey.Factory("000809:RequiemPatcherKeyword.esp");
                                        break;
                                    case "AtronachFrostRace":
                                        FormKeyNewRace = FormKey.Factory("00080A:RequiemPatcherKeyword.esp");
                                        break;
                                    case "AtronachStormRace":
                                        FormKeyNewRace = FormKey.Factory("00080B:RequiemPatcherKeyword.esp");
                                        break;
                                    case "BearBrownRace":
                                        FormKeyNewRace = FormKey.Factory("00080C:RequiemPatcherKeyword.esp");
                                        break;
                                    case "BearBlackRace":
                                        FormKeyNewRace = FormKey.Factory("00080D:RequiemPatcherKeyword.esp");
                                        break;
                                    case "BearSnowRace":
                                        FormKeyNewRace = FormKey.Factory("00080E:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC2MountedRieklingRace":
                                        FormKeyNewRace = FormKey.Factory("00080F:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC2BoarRace":
                                        FormKeyNewRace = FormKey.Factory("000810:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC2FakeCoffinRace":
                                        FormKeyNewRace = FormKey.Factory("000811:RequiemPatcherKeyword.esp");
                                        break;
                                    case "ChaurusRace":
                                        FormKeyNewRace = FormKey.Factory("000812:RequiemPatcherKeyword.esp");
                                        break;
                                    case "ChaurusReaperRace":
                                        FormKeyNewRace = FormKey.Factory("000813:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC1ChaurusHunterRace":
                                        FormKeyNewRace = FormKey.Factory("000814:RequiemPatcherKeyword.esp");
                                        break;
                                    case "ChickenRace":
                                        FormKeyNewRace = FormKey.Factory("000815:RequiemPatcherKeyword.esp");
                                        break;
                                    case "ElkRace":
                                        FormKeyNewRace = FormKey.Factory("000816:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DefaultRace":
                                        FormKeyNewRace = FormKey.Factory("000817:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DarkElfRace":
                                        FormKeyNewRace = FormKey.Factory("000817:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DA13AfflictedRace":
                                        FormKeyNewRace = FormKey.Factory("000817:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DremoraRace":
                                        FormKeyNewRace = FormKey.Factory("000818:RequiemPatcherKeyword.esp");
                                        break;
                                    case "ImperialRaceChild":
                                        FormKeyNewRace = FormKey.Factory("000819:RequiemPatcherKeyword.esp");
                                        break;
                                    case "MagicAnomalyRace":
                                        FormKeyNewRace = FormKey.Factory("00081A:RequiemPatcherKeyword.esp");
                                        break;
                                    case "AlduinRace":
                                        FormKeyNewRace = FormKey.Factory("00081B:RequiemPatcherKeyword.esp");
                                        break;
                                    case "UndeadDragonRace":
                                        FormKeyNewRace = FormKey.Factory("00081C:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DogRace":
                                        FormKeyNewRace = FormKey.Factory("00081D:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC1DeathHoundRace":
                                        FormKeyNewRace = FormKey.Factory("00081E:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC1DeathHoundCompanionRace":
                                        FormKeyNewRace = FormKey.Factory("00081D:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DragonPriestRace":
                                        FormKeyNewRace = FormKey.Factory("000820:RequiemPatcherKeyword.esp");
                                        break;
                                    case "SkeletonNecroPriestRace":
                                        FormKeyNewRace = FormKey.Factory("000821:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC1UndeadDragonRace":
                                        FormKeyNewRace = FormKey.Factory("000822:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DragonRace":
                                        FormKeyNewRace = FormKey.Factory("000823:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DraugrRace":
                                        FormKeyNewRace = FormKey.Factory("000824:RequiemPatcherKeyword.esp");
                                        break;
                                    case "SkeletonRace":
                                        FormKeyNewRace = FormKey.Factory("000825:RequiemPatcherKeyword.esp");
                                        break;
                                    case "RigidSkeletonRace":
                                        FormKeyNewRace = FormKey.Factory("000825:RequiemPatcherKeyword.esp");
                                        break;
                                    case "SkeletonNecroRace":
                                        FormKeyNewRace = FormKey.Factory("000825:RequiemPatcherKeyword.esp");
                                        break;
                                    case "SkeletonArmorRace":
                                        FormKeyNewRace = FormKey.Factory("000825:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC1SoulCairnSkeletonNecroRace":
                                        FormKeyNewRace = FormKey.Factory("000826:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DwarvenSpiderRace":
                                        FormKeyNewRace = FormKey.Factory("000827:RequiemPatcherKeyword.esp");
                                        break;
                                    case "FalmerRace":
                                        FormKeyNewRace = FormKey.Factory("000828:RequiemPatcherKeyword.esp");
                                        break;
                                    case "FrostbiteSpiderRace":
                                        FormKeyNewRace = FormKey.Factory("000829:RequiemPatcherKeyword.esp");
                                        break;
                                    case "FrostbiteSpiderRaceGiant":
                                        FormKeyNewRace = FormKey.Factory("00082A:RequiemPatcherKeyword.esp");
                                        break;
                                    case "FrostbiteSpiderRaceLarge":
                                        FormKeyNewRace = FormKey.Factory("00082B:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC2ExpSpiderBaseRace":
                                        FormKeyNewRace = FormKey.Factory("00082C:RequiemPatcherKeyword.esp");
                                        break;
                                    case "GiantRace":
                                        FormKeyNewRace = FormKey.Factory("00082D:RequiemPatcherKeyword.esp");
                                        break;
                                    case "C00GiantOutsideWhiterunRace":
                                        FormKeyNewRace = FormKey.Factory("00082E:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC2LurkerRace":
                                        FormKeyNewRace = FormKey.Factory("00082F:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC2SeekerRace":
                                        FormKeyNewRace = FormKey.Factory("000830:RequiemPatcherKeyword.esp");
                                        break;
                                    case "GoatRace":
                                        FormKeyNewRace = FormKey.Factory("000831:RequiemPatcherKeyword.esp");
                                        break;
                                    case "HagravenRace":
                                        FormKeyNewRace = FormKey.Factory("000832:RequiemPatcherKeyword.esp");
                                        break;
                                    case "HareRace":
                                        FormKeyNewRace = FormKey.Factory("000833:RequiemPatcherKeyword.esp");
                                        break;
                                    case "CowRace":
                                        FormKeyNewRace = FormKey.Factory("000834:RequiemPatcherKeyword.esp");
                                        break;
                                    case "HorkerRace":
                                        FormKeyNewRace = FormKey.Factory("000835:RequiemPatcherKeyword.esp");
                                        break;
                                    case "HorseRace":
                                        FormKeyNewRace = FormKey.Factory("000836:RequiemPatcherKeyword.esp");
                                        break;
                                    case "CartHorseRace":
                                        FormKeyNewRace = FormKey.Factory("000837:RequiemPatcherKeyword.esp");
                                        break;
                                    case "IceWraithRace":
                                        FormKeyNewRace = FormKey.Factory("000838:RequiemPatcherKeyword.esp");
                                        break;
                                    case "dlc2SpectralDragonRace":
                                        FormKeyNewRace = FormKey.Factory("000839:RequiemPatcherKeyword.esp");
                                        break;
                                    case "MammothRace":
                                        FormKeyNewRace = FormKey.Factory("00083A:RequiemPatcherKeyword.esp");
                                        break;
                                    case "MudcrabRace":
                                        FormKeyNewRace = FormKey.Factory("00083B:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC2NetchRace":
                                        FormKeyNewRace = FormKey.Factory("00083C:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC2NetchCalfRace":
                                        FormKeyNewRace = FormKey.Factory("00083D:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC2RieklingRace":
                                        FormKeyNewRace = FormKey.Factory("00083E:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC2ThirskRieklingRace":
                                        FormKeyNewRace = FormKey.Factory("00083F:RequiemPatcherKeyword.esp");
                                        break;
                                    case "SabreCatRace":
                                        FormKeyNewRace = FormKey.Factory("000840:RequiemPatcherKeyword.esp");
                                        break;
                                    case "SabreCatSnowyRace":
                                        FormKeyNewRace = FormKey.Factory("000841:RequiemPatcherKeyword.esp");
                                        break;
                                    case "SkeeverRace":
                                        FormKeyNewRace = FormKey.Factory("000842:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC2AshHopperRace":
                                        FormKeyNewRace = FormKey.Factory("000843:RequiemPatcherKeyword.esp");
                                        break;
                                    case "SlaughterfishRace":
                                        FormKeyNewRace = FormKey.Factory("000844:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DwarvenSphereRace":
                                        FormKeyNewRace = FormKey.Factory("000845:RequiemPatcherKeyword.esp");
                                        break;
                                    case "SprigganRace":
                                        FormKeyNewRace = FormKey.Factory("000846:RequiemPatcherKeyword.esp");
                                        break;
                                    case "SprigganMatronRace":
                                        FormKeyNewRace = FormKey.Factory("000847:RequiemPatcherKeyword.esp");
                                        break;
                                    case "SprigganEarthMotherRace":
                                        FormKeyNewRace = FormKey.Factory("000848:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC2SprigganBurntRace":
                                        FormKeyNewRace = FormKey.Factory("000849:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DwarvenCenturionRace":
                                        FormKeyNewRace = FormKey.Factory("00084A:RequiemPatcherKeyword.esp");
                                        break;
                                    case "TrollRace":
                                        FormKeyNewRace = FormKey.Factory("00084B:RequiemPatcherKeyword.esp");
                                        break;
                                    case "TrollFrostRace":
                                        FormKeyNewRace = FormKey.Factory("00084C:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC1VampireBeastRace":
                                        FormKeyNewRace = FormKey.Factory("00084D:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC1GargoyleVariantBossRace":
                                        FormKeyNewRace = FormKey.Factory("00084E:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC1GargoyleVariantGreenRace":
                                        FormKeyNewRace = FormKey.Factory("00084F:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC1GargoyleRace":
                                        FormKeyNewRace = FormKey.Factory("000850:RequiemPatcherKeyword.esp");
                                        break;
                                    case "WerewolfBeastRace":
                                        FormKeyNewRace = FormKey.Factory("000851:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC2WerebearBeastRace":
                                        FormKeyNewRace = FormKey.Factory("000852:RequiemPatcherKeyword.esp");
                                        break;
                                    case "WispRace":
                                        FormKeyNewRace = FormKey.Factory("000853:RequiemPatcherKeyword.esp");
                                        break;
                                    case "WitchlightRace":
                                        FormKeyNewRace = FormKey.Factory("000854:RequiemPatcherKeyword.esp");
                                        break;
                                    case "WolfRace":
                                        FormKeyNewRace = FormKey.Factory("000855:RequiemPatcherKeyword.esp");
                                        break;
                                    case "C06WolfSpiritRace":
                                        FormKeyNewRace = FormKey.Factory("000856:RequiemPatcherKeyword.esp");
                                        break;
                                    case "DLC2DwarvenBallistaRace":
                                        FormKeyNewRace = FormKey.Factory("000856:RequiemPatcherKeyword.esp");
                                        break;

                                    default:
                                        Console.WriteLine($"Missing case for race flag: {kvp.Key}");
                                        break;

                                }

                        modifiedRace.Keywords ??= new();
                        modifiedRace.Keywords.Add(FormKeyNewRace);
                    }
                }

            if (raceAddedToDf < 1) DataTableMatchRace.Rows.Add(raace.EditorID, raace.FormKey, raace.EditorID, 0);
        }

   
        foreach (var classs in state.LoadOrder.PriorityOrder.Class().WinningOverrides())
        {
           

            var stringBuilder = new StringBuilder();

            classs.SkillWeights.Values.ForEach(s => stringBuilder.Append($"{s},"));
            var resultyyy = stringBuilder.ToString();
            var result = resultyyy.Substring(0, resultyyy.Length - 1);

            var stingbuilderHealth = new StringBuilder();
            classs.StatWeights.Values.ForEach(s => stingbuilderHealth.Append($"{s},"));
            var hmswiehtss = stingbuilderHealth.ToString();
            var hmswiehts = hmswiehtss.Substring(0, hmswiehtss.Length - 1);


            var stringBuildertwo = new StringBuilder();

            classs.SkillWeights.Values.Take(7).ToList().ForEach(s => stringBuildertwo.Append($"{s},"));

            var stirngwar = stringBuildertwo.ToString().TrimEnd(',');
      
            var values = stirngwar.Split(',').Select(int.Parse).ToArray();

            var sumWarrior = values.Sum();
      
            var stringBuildHa = new StringBuilder();

            classs.SkillWeights.Values.Skip(5).Take(1).ToList().ForEach(s => stringBuildHa.Append($"{s},"));
            var stringHa = stringBuildHa.ToString().TrimEnd(',');
            var valuesHa = stringHa.Split(',').Select(int.Parse).ToArray();
            var sumHa = valuesHa.Sum();


            var stringBuildLa = new StringBuilder();

            classs.SkillWeights.Values.Skip(6).Take(1).ToList().ForEach(s => stringBuildLa.Append($"{s},"));
            var stringLa = stringBuildLa.ToString().TrimEnd(',');
            var valuesLa = stringLa.Split(',').Select(int.Parse).ToArray();
            var sumLa = valuesLa.Sum();
            var prefArmor = "HA";
            if (sumLa > sumHa) prefArmor = "LA";
            if (sumLa < sumHa) prefArmor = "HA";
            if (sumLa < 1)
                if (sumHa < 1)
                    prefArmor = "Clothes";


            var stringBuilderThief = new StringBuilder();

            classs.SkillWeights.Values.Skip(7).Take(5).ToList().ForEach(s => stringBuilderThief.Append($"{s},"));

            var resultThief = stringBuilderThief.ToString().TrimEnd(',');

            //Console.WriteLine("thief: " + resultThief);
            // Split the string by comma and convert each part to an integer
            var valuesThief = resultThief.Split(',').Select(int.Parse).ToArray();

            // Calculate the sum
            var sumThief = valuesThief.Sum();

            ////Console.WriteLine($"Thief {sumThief}");

            var stringBuilderMage = new StringBuilder();

            classs.SkillWeights.Values.Skip(12).Take(6).ToList().ForEach(s => stringBuilderMage.Append($"{s},"));

            var resultMage = stringBuilderMage.ToString().TrimEnd(',');
            //Console.WriteLine("mage: " + resultMage     );


            // Split the string by comma and convert each part to an integer
            var valuesMage = resultMage.Split(',').Select(int.Parse).ToArray();

            // Calculate the sum
            var sumMage = valuesMage.Sum();
            //Console.WriteLine("summage: " + sumMage);
            // //Console.WriteLine($"Mage {sumMage}");
            var classArchType = "none";
            var classArchTypeNoArm = "none";
            if (sumWarrior > sumMage)
            {
                if (sumMage < 1)
                {
                    classArchType = $"Warrior_{prefArmor}";
                    classArchTypeNoArm = "Warrior";
                }

                if (sumMage > 0)
                {
                    classArchType = $"BattleMage_{prefArmor}";
                    classArchTypeNoArm = "BattleMage";
                }
            }

            if (sumWarrior < sumMage)
            {
                if (sumWarrior < 1)
                {
                    classArchType = $"PureMage_{prefArmor}";
                    classArchTypeNoArm = "PureMage";
                }

                if (sumWarrior > 0)
                {
                    classArchType = $"BattleMage_{prefArmor}";
                    classArchTypeNoArm = "BattleMage";
                }
            }

            if (sumWarrior > 0)
                if (sumMage > 0)
                    if (sumWarrior == sumMage)
                    {
                        classArchType = $"BattleMage_{prefArmor}";
                        classArchTypeNoArm = "BattleMage";
                    }

            if (sumWarrior < 1)
                if (sumMage < 1)
                {
                    classArchType = $"noncombat_{prefArmor}";
                    classArchTypeNoArm = "Warrior";
                }



           

            if (classArchTypeNoArm == "Warrior")
            {
               // Console.WriteLine($"0x88C~RequiemPatcherKeyword.esp|ActorPatchedForReq|{classs.EditorID}");
               // warriorHealth += ","+ classs.EditorID;
               // spellStamina += ","+ classs.EditorID;
                classIsWarrior += ",0x00" + classs.FormKey.ToString().Replace(":", "~");
                // WriteToIniFile(outputPath, $"0x88C~RequiemPatcherKeyword.esp|ActorPatchedForReq|{classs.EditorID}");
                // WriteToIniFile(outputPath, $"0x8AA~RequiemPatcherKeyword.esp|ActorPatchedForReq|{classs.EditorID}");

            }
            if (classArchTypeNoArm == "BattleMage")
            {
                classIsBattleMage += ",0x00" + classs.FormKey.ToString().Replace(":", "~");
                //warriorHealth += "," + classs.EditorID;
                //spellStamina += "," + classs.EditorID;
                //spellMagic += "," + classs.EditorID;
                //Console.WriteLine($"0x88C~RequiemPatcherKeyword.esp|ActorPatchedForReq|{classs.EditorID}");
                //WriteToIniFile(outputPath, $"0x88C~RequiemPatcherKeyword.esp|ActorPatchedForReq|{classs.EditorID}");
                //WriteToIniFile(outputPath, $"0x8AA~RequiemPatcherKeyword.esp|ActorPatchedForReq|{classs.EditorID}");
                //WriteToIniFile(outputPath, $"0x8A9~RequiemPatcherKeyword.esp|ActorPatchedForReq|{classs.EditorID}");
            }
            if (classArchTypeNoArm == "PureMage")
            {
                classIsPureMage += ",0x00" + classs.FormKey.ToString().Replace(":", "~");
               // spellMagic += "," + classs.EditorID;
               // pureMageHealth += "," + classs.EditorID;
               // WriteToIniFile(outputPath, $"0x8AB~RequiemPatcherKeyword.esp|ActorPatchedForReq|{classs.EditorID}");
                //WriteToIniFile(outputPath, $"0x8A9~RequiemPatcherKeyword.esp|ActorPatchedForReq|{classs.EditorID}");
            }


          

            ////////////////////////////////BEGIN CALCULATE HEALTH, STAMINA, AND MAGICKA ADDED BY AUTOCALCSTATS
            double[] valuesClassHealth =
            {
                        3.333333, 1.666667, 1.500000, 2.500000, 2.000000, 1.428571, 0.000000, 3.000000, 2.857143,
                        3.125000, 1.250000, 4.000000, 5.000000
                    };

            var classHsMparts = hmswiehts.Split(',');

            var classH = double.Parse(classHsMparts[0]);
            var classM = double.Parse(classHsMparts[1]);
            var classS = double.Parse(classHsMparts[2]);
            var classHSlope = 5 * 1 * (classH / (classH + classM + classS));
            var classMSlope = 5 * 1 * (classM / (classH + classM + classS));
            var classSSlope = 5 * 1 * (classH / (classS + classM + classS));

            ////////////////////////////////END CALCULATE HEALTH, STAMINA, AND MAGICKA ADDED BY AUTOCALCSTATS

            ////////////////////////////////ASSIGN SPELL TO REMOVE ATTRIBUTES ADDED BY AUTOCALCSTATS FOR PCLEVELMULT
            //    if (hasUseSpellList == 0 && hasVanillaStats == 0)
            //  {
            ////////////////////////////////BEGIN ASSIGN SPELL TO REMOVE ATTRIBUTES ADDED BY AUTOCALCSTATS FOR PCLEVELMULT
            var classLevel = classHSlope; // Example class level
            var closestValue = valuesClassHealth[0]; // Initialize with the first value
            var minDifference =
                Math.Abs(classLevel - valuesClassHealth[0]); // Initialize with the difference to the first value

            // Find the closest value
            foreach (var value in valuesClassHealth)
            {
                var difference = Math.Abs(classLevel - value);
                if (difference < minDifference)
                {
                    minDifference = difference;
                    closestValue = value;
                }
            }

            // Use switch statement based on the closest value

                switch (closestValue)
                {
                    case 0.0:
                        //Console.WriteLine("Closest value is 0.0");
                        break;
                    case 1.0:

                        //Console.WriteLine("Closest value is 1.0");
              
                             classString1 += ",0x00" + classs.FormKey.ToString().Replace(":", "~");

                    break;
                    case 1.25:

                      
                             classString2 += ",0x00" + classs.FormKey.ToString().Replace(":", "~");

                    break;
                    case 1.428571:

                             classString3 += ",0x00" + classs.FormKey.ToString().Replace(":", "~");

                    break;

                case 1.5:
                        //Console.WriteLine("5");
                    
                             classString4 += ",0x00" + classs.FormKey.ToString().Replace(":", "~");

                    break;
                    case 1.666667:
                        //Console.WriteLine("666667");
                  
                             classString5 += ",0x00" + classs.FormKey.ToString().Replace(":", "~");

                    break;
                    case 2.0:
                        //Console.WriteLine("0");
                    
                             classString6 += ",0x00" + classs.FormKey.ToString().Replace(":", "~");

                    break;
                    case 2.5:
                        //Console.WriteLine("5");
                   
                             classString7 += ",0x00" + classs.FormKey.ToString().Replace(":", "~");

                    break;
                    case 2.857143:
                        //Console.WriteLine("857143");
                      
                             classString8 += ",0x00" + classs.FormKey.ToString().Replace(":", "~");

                    break;
                    case 3.0:
                        //Console.WriteLine("0");
                      
                             classString9 += ",0x00" + classs.FormKey.ToString().Replace(":", "~");

                    break;
                    case 3.125:
                        //Console.WriteLine("125");
                       
                             classString10 += ",0x00" + classs.FormKey.ToString().Replace(":", "~");

                    break;
                    case 3.333333:
                        //Console.WriteLine("333333");
                   
                             classString11 += ",0x00" + classs.FormKey.ToString().Replace(":", "~");

                    break;
                    case 4.0:
                    //Console.WriteLine("0");

                    classString12 += ",0x00" + classs.FormKey.ToString().Replace(":", "~");



                        break;
                    case 5.0:
                     
                             classString13 += ",0x00" + classs.FormKey.ToString().Replace(":", "~");

                    break;
                }
            ////////////////////////////////END ASSIGN SPELL TO REMOVE ATTRIBUTES ADDED BY AUTOCALCSTATS FOR PCLEVELMULT




            DataTable.Rows.Add(classs.FormKey, classs.EditorID, result, hmswiehts, classArchType, sumWarrior, sumThief,
                sumMage, prefArmor, classArchTypeNoArm, closestValue);
        }


       


        
            foreach (var npc in state.LoadOrder.PriorityOrder.Npc().WinningOverrides())
            {
                ModKey modKey = npc.FormKey.ModKey.FileName;



                //if mod is not matched then skip
                uint npcFromSelectedMod = 0;
                foreach (var slectedPlugin in npcGroups.Select(x => x.ModKey.FileName))

                    if (modKey == slectedPlugin)
                        npcFromSelectedMod = 1;

                if(npcFromSelectedMod == 0){
                continue;
                }
                var raceThing = npc.Race;
                var npcRaceGetter = raceThing.Resolve(state.LinkCache);
                var npcRaceId = npcRaceGetter.EditorID;

                uint racematch = 0;
                uint actorNpCmatch = 0; //is ActorTypeNpc if 1
                uint vampirematch = 0;
                var classThing = npc.Class;
                //  string theIDofClass = classThing?.ToString() ?? "Unknown";

                var idClassGetter = classThing?.Resolve(state.LinkCache);
                var npcClass = "Warrior";
                var npcClassHsm = "Warrior";
                object npcClassHealthPerLevel = 1.5;

                foreach (DataRow row in DataTable.Rows)
                    if (row.Field<string>("FormKey") == idClassGetter?.FormKey.ToString())
                    {
                        npcClass = row[9].ToString()!;
                        npcClassHsm = row[3].ToString()!;
                    npcClassHealthPerLevel = row[10]!;
                    //  //Console.WriteLine(npcClassHSM);
                    break; // Exit the loop once a match is found
                    }


                foreach (DataRow row in DataTableRace.Rows)
                    if (row.Field<string>("FormKey") == npcRaceGetter.FormKey.ToString())
                    {
                        if (row.ItemArray.Length >= 2)
                        {
                            // Print the second item in the row
                            if (row.ItemArray[1]!.ToString() == "True")
                            {
                                racematch = 1;
                                actorNpCmatch = 1;
                                ////Console.WriteLine("stillworks1");
                            }

                            if (row.ItemArray[2]!.ToString() == "True")
                            {
                                racematch = 1;
                                actorNpCmatch = 1;
                                vampirematch = 1;
                                // //Console.WriteLine("stillworks2");
                            }

                        }


                        break; // Exit the loop once a match is found
                    }



                if (Equals(raceThing, Skyrim.Race.ElderRace))
                {

                    racematch = 1;
                    actorNpCmatch = 1;
                }


                if (npcFromSelectedMod == 1)
                {

                    double level = 1;
                    double maxLevel = 1;
                    // int hasAutoFlag = 0;
                    var haslevelMult = 0;
                    if (npc.Configuration.Level is IPcLevelMult)
                    {
                        level = npc.Configuration.CalcMinLevel;
                        haslevelMult = 1;
                        maxLevel = npc.Configuration.CalcMaxLevel;
                    }
                    else
                    {
                        level = ((INpcLevelGetter)npc.Configuration.Level).Level;
                    }


                    var currentLevel = level;
                    var delevelToSet = (short)level;

                    double addedHealthPerLevel = 5.5;
                    double magickaOffsetPerLevel = 10;
                    double staminaOffsetPerLevel = 10;
                    int warriorMismatch = 0;
                    int pureMageMismatch = 0;
               
                    if (npcClass == "Warrior")
                    {

                        var npcSpellId = "Spells:";
                        for (var i = 0; i <= npc.ActorEffect?.Count - 1; i++)
                        {
                            var spellThing = npc.ActorEffect?[i];

                            if (spellThing != null)
                            {
                                var npcSpellGetter = spellThing.Resolve(state.LinkCache);
                                npcSpellId += npcSpellGetter.EditorID;

                            }
                        }


                        string[] spellTypes = { "Destruction", "Restoration", "Alteration", "Conjuration", "Illusion" };

                        var containsSpellType = spellTypes.Any(spellType => npcSpellId.Contains(spellType));



                        if (containsSpellType)
                        {
                            warriorMismatch = 1;
                        npcClass = "BattleMage";
                        //create copy of class
                        //var npcClassGetter = npc.Class.Resolve(state.LinkCache);
                        //var newClass = state.PatchMod.Classes.DuplicateInAsNewRecord(npcClassGetter);
                        //

                    }
                        

                    }

                    if (npcClass == "PureMage")
                    {

                        var npcitemId = "Weapons:";

                        for (var i = 0; i <= npc.Items?.Count - 1; i++)
                        {
                            var itemThing = npc.Items?[i];
                            var itemThing2 = itemThing?.Item.Item;

                            if (itemThing != null)
                            {
                                var npcitemGetter = itemThing2?.Resolve(state.LinkCache);
                                npcitemId += npcitemGetter?.EditorID;

                            }
                        }


                        string[] itemTypes = { "Sword", "Greatsword", "Mace", "Warhammer", "Axe", "Bow", "Arrow" };

                        var containsItemType = itemTypes.Any(itemTypes => npcitemId.Contains(itemTypes));


                        if (containsItemType)
                        {
                            pureMageMismatch = 1;
                        npcClass = "BattleMage";
                        //create copy of class
                       //var npcClassGetter = npc.Class.Resolve(state.LinkCache);
                       //var newClass = state.PatchMod.Classes.DuplicateInAsNewRecord(npcClassGetter);
                       //newClass.EditorID = npcClassGetter.EditorID + npc.EditorID + "PM";
                    }
                        
                    }


                    if (npcClass == "Warrior")
                    {
                        addedHealthPerLevel = formSettings.Value.WarriorHealthPerLevel;
                        staminaOffsetPerLevel = formSettings.Value.StaminaPerLevel;
                        magickaOffsetPerLevel = 0;
                    }

                    if (npcClass == "BattleMage")
                    {
                        addedHealthPerLevel = formSettings.Value.WarriorHealthPerLevel;
                        staminaOffsetPerLevel = formSettings.Value.StaminaPerLevel;
                        magickaOffsetPerLevel = formSettings.Value.MagickaPerLevel;
                    }

                    if (npcClass == "PureMage")
                    {
                        addedHealthPerLevel = formSettings.Value.PureMageHealthPerLevel;
                        staminaOffsetPerLevel = 0;
                        magickaOffsetPerLevel = formSettings.Value.MagickaPerLevel;
                    }

                    double mageIntercept = 0;
                    if (npcClass == "PureMage" || npcClass == "BattleMage") mageIntercept = 50;


                    double addToPresentOffset = 0;


                    var npcMatchedRace = "none";

                    var isFromNewRace = 0;
                    foreach (DataRow row in DataTableMatchRace.Rows)
                        if (row.Field<string>("OriginalRace") == npcRaceId)
                        {
                            npcMatchedRace = row.Field<string>("MatchEDID");

                            if (row.Field<int>("FromNewRace") == 1) isFromNewRace = 1;

                            break; // Exit the loop once a match is found
                        }


                    var npcIsADragon = 0;
                    double vanillaOffset = 0;
                    int loopCount = 0;
                    var draugrmatch = 0;
                    var falmerMatch = 0;
                    var doesScale = 1;
                    var racePerksToDistribute = new string[0];
                    var raceSpellsToDistribute = new string[0];
                    var racePerksToDistributeNew = new string[0];
                    var raceSpellsToDistributNEw = new string[0];
                  
                    if (vampirematch > 0)
                    {
                        addedHealthPerLevel = 300;


                        if (level > 45 && level < 53) addToPresentOffset = 57.14 * (level - 45);
                        if (level > 52) addToPresentOffset = 400;


                        staminaOffsetPerLevel = 1000;
                        magickaOffsetPerLevel = 1000;
                        level = 1;



                        //formKeyNewRace = FormKey.Factory("000828:RequiemPatcherKeyword.esp");
                        racematch = 1;
                       // if (haslevelMult > 0)
                       // {
                       //     Array.Resize(ref raceSpellsToDistribute, raceSpellsToDistribute.Length + 1);
                       //     raceSpellsToDistribute[0] = "0008A5:RequiemPatcherKeyword.esp"; //Vampire Health per level
                       // }
                    }

                Dictionary<string, int> raceFlags = new Dictionary<string, int>
                {
                    { "AtronachFlameRace", 0 }, { "AtronachFrostRace", 0 }, { "AtronachStormRace", 0 },
                    { "BearBrownRace", 0 }, { "BearBlackRace", 0 }, { "BearSnowRace", 0 },
                    { "DLC2MountedRieklingRace", 0 }, { "DLC2BoarRace", 0 }, { "DLC2FakeCoffinRace", 0 },
                    { "ChaurusRace", 0 }, { "ChaurusReaperRace", 0 }, { "DLC1ChaurusHunterRace", 0 },
                    { "ChickenRace", 0 }, { "ElkRace", 0 }, { "DefaultRace", 0 }, { "DarkElfRace", 0 },
                    { "DA13AfflictedRace", 0 }, { "DremoraRace", 0 }, { "ImperialRaceChild", 0 },
                    { "MagicAnomalyRace", 0 }, { "AlduinRace", 0 }, { "UndeadDragonRace", 0 }, { "DogRace", 0 },
                    { "DLC1DeathHoundRace", 0 }, { "DLC1DeathHoundCompanionRace", 0 },
                    { "DragonPriestRace", 0 }, { "SkeletonNecroPriestRace", 0 }, { "DLC1UndeadDragonRace", 0 },
                    { "DragonRace", 0 }, { "DraugrRace", 0 }, { "SkeletonRace", 0 },
                    { "RigidSkeletonRace", 0 }, { "SkeletonArmorRace", 0 }, { "SkeletonNecroRace", 0 },
                    { "DLC1SoulCairnSkeletonNecroRace", 0 }, { "DwarvenSpiderRace", 0 },
                    { "FalmerRace", 0 }, { "FrostbiteSpiderRace", 0 }, { "FrostbiteSpiderRaceGiant", 0 },
                    { "FrostbiteSpiderRaceLarge", 0 }, { "DLC2ExpSpiderBaseRace", 0 },
                    { "GiantRace", 0 }, { "C00GiantOutsideWhiterunRace", 0 }, { "DLC2LurkerRace", 0 },
                    { "DLC2SeekerRace", 0 }, { "GoatRace", 0 }, { "HagravenRace", 0 },
                    { "HareRace", 0 }, { "CowRace", 0 }, { "HorkerRace", 0 }, { "HorseRace", 0 },
                    { "CartHorseRace", 0 }, { "IceWraithRace", 0 }, { "dlc2SpectralDragonRace", 0 },
                    { "MammothRace", 0 }, { "MudcrabRace", 0 }, { "DLC2NetchRace", 0 }, { "DLC2NetchCalfRace", 0 },
                    { "DLC2RieklingRace", 0 }, { "DLC2ThirskRieklingRace", 0 },
                    { "SabreCatRace", 0 }, { "SabreCatSnowyRace", 0 }, { "SkeeverRace", 0 }, { "DLC2AshHopperRace", 0 },
                    { "SlaughterfishRace", 0 }, { "DwarvenSphereRace", 0 },
                    { "SprigganRace", 0 }, { "SprigganMatronRace", 0 }, { "SprigganEarthMotherRace", 0 },
                    { "DLC2SprigganBurntRace", 0 }, { "DwarvenCenturionRace", 0 },
                    { "TrollRace", 0 }, { "TrollFrostRace", 0 }, { "DLC1VampireBeastRace", 0 },
                    { "DLC1GargoyleVariantBossRace", 0 }, { "DLC1GargoyleVariantGreenRace", 0 },
                    { "DLC1GargoyleRace", 0 }, { "WerewolfBeastRace", 0 }, { "DLC2WerebearBeastRace", 0 },
                    { "WispRace", 0 }, { "WitchlightRace", 0 }, { "WolfRace", 0 },
                    { "C06WolfSpiritRace", 0 }, { "DLC2DwarvenBallistaRace", 0 }
                };



                if (npcMatchedRace != null && raceFlags.ContainsKey(npcMatchedRace)) raceFlags[npcMatchedRace] = 1;
        
                  
                    // Perform actions based on race flags
                    foreach (var kvp in raceFlags)
                        if (kvp.Value == 1)
                            switch (kvp.Key)
                            {
                                case "AtronachFlameRace":
                                    //Formkey.Factory("000809:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 225;
                                    staminaOffsetPerLevel = 50;
                                    magickaOffsetPerLevel = 900;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 15;
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39D8:Requiem.esp"; //armor
                                    Array.Resize(ref racePerksToDistributeNew, racePerksToDistributeNew.Length + 1);
                                    racePerksToDistributeNew[0] = "AD3A49:Requiem.esp"; //dremora trait


                                    break;
                                case "AtronachFrostRace":
                                    //Formkey.Factory("00080A:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 650;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 16;
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39D7:Requiem.esp"; //armor
                                    Array.Resize(ref racePerksToDistributeNew, racePerksToDistributeNew.Length + 1);
                                    racePerksToDistributeNew[0] = "AD3A48:Requiem.esp"; //dremora trait

                                    break;
                                case "AtronachStormRace":
                                    //Formkey.Factory("00080B:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 600;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 30;
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39D6:Requiem.esp"; //armor
                                    Array.Resize(ref racePerksToDistributeNew, racePerksToDistributeNew.Length + 1);
                                    racePerksToDistributeNew[0] = "AD3A47:Requiem.esp"; //dremora trait

                                    break;
                                case "BearBrownRace":
                                    //Formkey.Factory("00080C:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 350;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 12;
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0A:Requiem.esp";

                                    break;
                                case "BearBlackRace":
                                    //Formkey.Factory("00080D:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 350;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 12;
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0A:Requiem.esp";

                                    break;
                                case "BearSnowRace":
                                    //Formkey.Factory("00080E:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 300;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 20;
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0A:Requiem.esp";

                                    break;
                                case "DLC2MountedRieklingRace":
                                    //Formkey.Factory("00080F:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 80;
                                    staminaOffsetPerLevel = 150;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 4);
                                    racePerksToDistribute[0] = "0FAB0B:Requiem.esp"; //armor pen
                                    racePerksToDistribute[1] = Skyrim.Perk.Barbarian20.FormKey.ToString(); //armor pen
                                    racePerksToDistribute[2] = Skyrim.Perk.Barbarian00.FormKey.ToString(); //armor pen
                                    racePerksToDistribute[3] = Skyrim.Perk.ChampionsStance.FormKey.ToString(); //armor pen
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "22887F:Fozars_Dragonborn_-_Requiem_Patch.esp"; //armor


                                    break;
                                case "DLC2BoarRace":
                                    //Formkey.Factory("000810:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 50;
                                    staminaOffsetPerLevel = 100;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;

                                    break;
                                case "DLC2FakeCoffinRace":
                                    //Formkey.Factory("000811:RequiemPatcherKeyword.esp");


                                    break;
                                case "ChaurusRace":
                                    //Formkey.Factory("000812:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 125;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 12;
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39E7:Requiem.esp"; //armor


                                    break;
                                case "ChaurusReaperRace":
                                    //Formkey.Factory("000813:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 150;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 20;
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39E7:Requiem.esp"; //armor

                                    break;
                                case "DLC1ChaurusHunterRace":
                                    //Formkey.Factory("000814:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 150;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    vanillaOffset = 150;
                                    delevelToSet = 32;
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39E7:Requiem.esp"; //armor
                                    break;
                                case "ChickenRace":
                                    //   formKeyNewRace = //Formkey.Factory("000815:RequiemPatcherKeyword.esp");
                                    break;
                                case "ElkRace":


                                    //   formKeyNewRace = //Formkey.Factory("000816:RequiemPatcherKeyword.esp");
                                    break;
                                case "DefaultRace":
                                    actorNpCmatch = 1;
                                    //Formkey.Factory("000817:RequiemPatcherKeyword.esp");
                                    racematch = 1;

                                    break;

                                case "DarkElfRace":
                                    actorNpCmatch = 1;
                                    //Formkey.Factory("000817:RequiemPatcherKeyword.esp");
                                    racematch = 1;

                                    break;
                                case "DA13AfflictedRace":
                                    actorNpCmatch = 1;
                                    //Formkey.Factory("000817:RequiemPatcherKeyword.esp");
                                    racematch = 1;

                                    break;

                                case "DremoraRace":
                                    //Formkey.Factory("000818:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 650;
                                    staminaOffsetPerLevel = 500;
                                    magickaOffsetPerLevel = 450;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    Array.Resize(ref racePerksToDistributeNew, racePerksToDistributeNew.Length + 1);
                                    racePerksToDistributeNew[0] = "AD3B27:Requiem.esp"; //dremora trait


                                    break;
                                case "ImperialRaceChild":


                                    //   formKeyNewRace = //Formkey.Factory("000819:RequiemPatcherKeyword.esp");
                                    break;
                                case "MagicAnomalyRace":


                                    //     formKeyNewRace = //Formkey.Factory("00081A:RequiemPatcherKeyword.esp");
                                    break;
                                case "AlduinRace":
                                    //Formkey.Factory("00081B:RequiemPatcherKeyword.esp");
                                    npcIsADragon = 1;
                                    //instead multiply current offset times 0.3!!!
                                    addedHealthPerLevel = 400;
                                    staminaOffsetPerLevel = 19900;
                                    magickaOffsetPerLevel = 4850;
                                    level = 1;
                                    doesScale = 0;
                                    racematch = 1;
                                    delevelToSet = 50;
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "033869:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39DB:Requiem.esp"; //armor

                                    break;
                                case "UndeadDragonRace":
                                    //Formkey.Factory("00081C:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 14500;
                                    staminaOffsetPerLevel = 4850;
                                    magickaOffsetPerLevel = 19900;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 100;
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "033869:Requiem.esp";
                                    Array.Resize(ref racePerksToDistributeNew, racePerksToDistributeNew.Length + 1);
                                    racePerksToDistributeNew[0] = "AD3A45:Requiem.esp";


                                    // Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    // racePerksToDistribute[0] = "033869:Requiem.esp";
                                    break;
                                case "DogRace":


                                    //    formKeyNewRace = //Formkey.Factory("00081D:RequiemPatcherKeyword.esp");
                                    break;
                                case "DLC1DeathHoundRace":
                                    //     formKeyNewRace = //Formkey.Factory("00081E:RequiemPatcherKeyword.esp");
                                    break;
                                case "DLC1DeathHoundCompanionRace":


                                    //     formKeyNewRace = //Formkey.Factory("00081F:RequiemPatcherKeyword.esp");
                                    break;
                                case "DragonPriestRace":
                                    //Formkey.Factory("000820:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 0;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 1300;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    Array.Resize(ref racePerksToDistributeNew, racePerksToDistributeNew.Length + 1);
                                    racePerksToDistributeNew[0] = "AD3A46:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD3A64:Requiem.esp"; //armor


                                    break;
                                case "SkeletonNecroPriestRace":
                                    //Formkey.Factory("000821:RequiemPatcherKeyword.esp");
                                    Array.Resize(ref racePerksToDistributeNew, racePerksToDistributeNew.Length + 1);
                                    racePerksToDistributeNew[0] = "AD3A45:Requiem.esp";


                                    break;
                                case "DLC1UndeadDragonRace":
                                    //Formkey.Factory("000822:RequiemPatcherKeyword.esp");
                                    npcIsADragon = 1;
                                    //instead multiply current offset times 0.3!!!
                                    addedHealthPerLevel = 400;
                                    staminaOffsetPerLevel = 19900;
                                    magickaOffsetPerLevel = 4850;
                                    level = 1;
                                    doesScale = 0;
                                    racematch = 1;
                                    delevelToSet = 50;
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "033869:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39DB:Requiem.esp"; //armor

                                    break;
                                case "DragonRace":
                                    //Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    //Formkey.Factory("000823:RequiemPatcherKeyword.esp");


                                    npcIsADragon = 1;
                                    //instead multiply current offset times 0.3!!!
                                    addedHealthPerLevel = 400;
                                    staminaOffsetPerLevel = 19900;
                                    magickaOffsetPerLevel = 4850;
                                    level = 1;
                                    doesScale = 0;
                                    racematch = 1;
                                    delevelToSet = 50;
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "033869:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39DB:Requiem.esp"; //armor


                                    break;
                                case "DraugrRace":
                                    //formKeyNewRace = FormKey.Factory("000824:RequiemPatcherKeyword.esp");
                                    //level 1 = 200
                                    //levels 2:40 -2.5 per level
                                    //level 15 = 250
                                    //level 30 = 300
                                    //level 40 = 650
                                    addedHealthPerLevel = 200;
                                    if (level < 6)
                                    {
                                    }

                                    if (level > 29) addToPresentOffset = 100;

                                    draugrmatch = 1;
                                    level = 1;

                                    // levelAcrual = 0; 
                                    racematch = 1;
                                    delevelToSet = 6;


                                    if (haslevelMult > 0)
                                    {
                                        Array.Resize(ref raceSpellsToDistribute, raceSpellsToDistribute.Length + 2);
                                        raceSpellsToDistribute[0] = "000891:RequiemPatcherKeyword.esp"; // Health per level
                                        raceSpellsToDistribute[1] = "0008DA:RequiemPatcherKeyword.esp"; //armor
                                    }
                                    else
                                    {
                                        Array.Resize(ref raceSpellsToDistribute, raceSpellsToDistribute.Length + 1);
                                        raceSpellsToDistribute[0] = "0008DA:RequiemPatcherKeyword.esp"; //armor
                                    }


                                    break;
                                case "SkeletonRace":
                                    //Formkey.Factory("000825:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 150;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    if (npcClass == "BattleMage" || npcClass == "PureMage")
                                    {
                                        magickaOffsetPerLevel = 500;
                                        addedHealthPerLevel = 130;
                                        staminaOffsetPerLevel = 3000;
                                        staminaOffsetPerLevel = 10;
                                        magickaOffsetPerLevel = 10;
                                        delevelToSet = 30;
                                    }

                                    Array.Resize(ref racePerksToDistributeNew, racePerksToDistributeNew.Length + 1);
                                    racePerksToDistributeNew[0] = "AD3A45:Requiem.esp";


                                    break;
                                case "RigidSkeletonRace":
                                    //Formkey.Factory("000825:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 150;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;

                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;


                                    if (npcClass == "BattleMage" || npcClass == "PureMage")
                                    {
                                        magickaOffsetPerLevel = 500;
                                        addedHealthPerLevel = 130;
                                        staminaOffsetPerLevel = 3000;
                                        delevelToSet = 30;
                                    }

                                    Array.Resize(ref racePerksToDistributeNew, racePerksToDistributeNew.Length + 1);
                                    racePerksToDistributeNew[0] = "AD3A45:Requiem.esp";

                                    break;
                                case "SkeletonNecroRace":
                                    //Formkey.Factory("000825:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 150;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    if (npcClass == "BattleMage" || npcClass == "PureMage")
                                    {
                                        magickaOffsetPerLevel = 500;
                                        addedHealthPerLevel = 130;
                                        staminaOffsetPerLevel = 3000;
                                        delevelToSet = 30;
                                    }

                                    Array.Resize(ref racePerksToDistributeNew, racePerksToDistributeNew.Length + 1);
                                    racePerksToDistributeNew[0] = "AD3A45:Requiem.esp";
                                    break;
                                case "SkeletonArmorRace":
                                    //Formkey.Factory("000825:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 150;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    if (npcClass == "BattleMage" || npcClass == "PureMage")
                                    {
                                        magickaOffsetPerLevel = 500;
                                        addedHealthPerLevel = 130;
                                        staminaOffsetPerLevel = 3000;
                                        delevelToSet = 30;
                                    }

                                    Array.Resize(ref racePerksToDistributeNew, racePerksToDistributeNew.Length + 1);
                                    racePerksToDistributeNew[0] = "AD3A45:Requiem.esp";

                                    break;

                                case "DLC1SoulCairnSkeletonNecroRace":
                                    //Formkey.Factory("000826:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 250;
                                    staminaOffsetPerLevel = 3000;
                                    magickaOffsetPerLevel = 2000;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    Array.Resize(ref racePerksToDistributeNew, racePerksToDistributeNew.Length + 1);
                                    racePerksToDistributeNew[0] = "AD3A45:Requiem.esp";

                                    break;
                                case "DwarvenSpiderRace":
                                    //Formkey.Factory("000827:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 50;
                                    staminaOffsetPerLevel = 50;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;

                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39DE:Requiem.esp"; //armor

                                    break;
                                case "FalmerRace":
                                   // formKeyNewRace = FormKey.Factory("000828:RequiemPatcherKeyword.esp");

                                    //level 1 = 200
                                    //levels 1:26 -2.5 per level
                                    //level 27:48 (13.63636364-2.5) per level
                                    //set default offset to 200
                                    addedHealthPerLevel = 200;
                                    if (level < 26)
                                    {
                                    }

                                    // classHealthGain = 2.5;
                                    if (level > 26 && level < 45) addToPresentOffset = 13.63636364 * (level - 26);
                                    if (level > 52) addToPresentOffset = 200;
                                    //
                                    //{
                                    //    addedHealthPerLevel = 200 + ((13.63636364-2.5) * (level - 27));
                                    //}
                                    //if (level >= 48)
                                    //{
                                    //    addedHealthPerLevel = 700;
                                    //}
                                    // StaminaOffsetPerLevel = 10;
                                    //MagickaOffsetPerLevel = 10;
                                    level = 1;

                                    //levelAcrual = 0; 
                                    racematch = 1;
                                    delevelToSet = 26;
                                    falmerMatch = 1;

                                    // Add three phrases to the array
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 10);
                                    racePerksToDistribute[0] = "0008D9:RequiemPatcherKeyword.esp";
                                    racePerksToDistribute[1] = "0008CB:RequiemPatcherKeyword.esp";
                                    racePerksToDistribute[2] = "0008CC:RequiemPatcherKeyword.esp";
                                    racePerksToDistribute[3] = "0008CD:RequiemPatcherKeyword.esp";
                                    racePerksToDistribute[4] = "0008CF:RequiemPatcherKeyword.esp";
                                    racePerksToDistribute[5] = "0008D1:RequiemPatcherKeyword.esp";
                                    racePerksToDistribute[6] = "0008D2:RequiemPatcherKeyword.esp";
                                    racePerksToDistribute[7] = "0008D4:RequiemPatcherKeyword.esp";
                                    racePerksToDistribute[8] = "0008D6:RequiemPatcherKeyword.esp";
                                    racePerksToDistribute[9] = "0008D8:RequiemPatcherKeyword.esp";
                                    if (haslevelMult > 0)
                                    {
                                        Array.Resize(ref raceSpellsToDistribute, raceSpellsToDistribute.Length + 2);
                                        raceSpellsToDistribute[0] =
                                            "000896:RequiemPatcherKeyword.esp"; //falmern Health per level
                                        raceSpellsToDistribute[1] =
                                            "0008BC:RequiemPatcherKeyword.esp"; //falmer trait perk, acitve if level>35
                                    }
                                    else
                                    {
                                        Array.Resize(ref raceSpellsToDistribute, raceSpellsToDistribute.Length + 1);
                                        // raceSpellsToDistribute[0] = "000896:RequiemPatcherKeyword.esp"; //falmern Health per level
                                        raceSpellsToDistribute[0] =
                                            "0008BC:RequiemPatcherKeyword.esp"; //falmer trait perk, acitve if level>35
                                    }


                                    //SPEL: FE02D896
                                    break;
                                case "FrostbiteSpiderRace":
                                    //Formkey.Factory("000829:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 235;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39E1:Requiem.esp"; //armor

                                    break;
                                case "FrostbiteSpiderRaceGiant":
                                    //Formkey.Factory("00082A:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 1000;
                                    staminaOffsetPerLevel = 200;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 55;
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "03DFD0:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39DF:Requiem.esp"; //armor

                                    //03DFD0
                                    break;
                                case "FrostbiteSpiderRaceLarge":
                                    //Formkey.Factory("00082B:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 500;
                                    staminaOffsetPerLevel = 75;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0A:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39E0:Requiem.esp"; //armor

                                    //0FAB0A
                                    break;
                                case "DLC2ExpSpiderBaseRace":
                                    //     formKeyNewRace = //Formkey.Factory("00082C:RequiemPatcherKeyword.esp");
                                    break;
                                case "GiantRace":
                                    //Formkey.Factory("00082D:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 1000;
                                    staminaOffsetPerLevel = 1400;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 70;
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "03DFD0:Requiem.esp";
                                    //03DFD0
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39E9:Requiem.esp"; //armor

                                    break;
                                case "C00GiantOutsideWhiterunRace":


                                    //   formKeyNewRace = //Formkey.Factory("00082E:RequiemPatcherKeyword.esp");
                                    break;
                                case "DLC2LurkerRace":
                                    //Formkey.Factory("00082F:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 1000;
                                    staminaOffsetPerLevel = 2800;
                                    magickaOffsetPerLevel = 1000;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    vanillaOffset = -200;
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "03DFD0:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "228878:Fozars_Dragonborn_-_Requiem_Patch.esp"; //armor

                                    break;
                                case "DLC2SeekerRace":
                                    //Formkey.Factory("000830:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 300;
                                    staminaOffsetPerLevel = 200;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 35;
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "22887A:Fozars_Dragonborn_-_Requiem_Patch.esp"; //armor
                                    break;
                                case "GoatRace":


                                    //     formKeyNewRace = //Formkey.Factory("000831:RequiemPatcherKeyword.esp");
                                    break;
                                case "HagravenRace":
                                    //Formkey.Factory("000832:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 100;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 650;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 35;

                                    break;
                                case "HareRace":


                                    //   formKeyNewRace = //Formkey.Factory("000833:RequiemPatcherKeyword.esp");
                                    break;
                                case "CowRace":


                                    //     formKeyNewRace = //Formkey.Factory("000834:RequiemPatcherKeyword.esp");
                                    break;
                                case "HorkerRace":
                                    //Formkey.Factory("000835:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 550;
                                    staminaOffsetPerLevel = 35;
                                    magickaOffsetPerLevel = -2;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;

                                    break;
                                case "HorseRace":
                                    //    formKeyNewRace = //Formkey.Factory("000836:RequiemPatcherKeyword.esp");
                                    break;
                                case "CartHorseRace":


                                    //    formKeyNewRace = //Formkey.Factory("000837:RequiemPatcherKeyword.esp");
                                    break;
                                case "IceWraithRace":
                                    //    formKeyNewRace = //Formkey.Factory("000838:RequiemPatcherKeyword.esp");
                                    break;
                                case "dlc2SpectralDragonRace":
                                    //Formkey.Factory("000839:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 300;
                                    staminaOffsetPerLevel = 1000;
                                    magickaOffsetPerLevel = 500;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;

                                    break;
                                case "MammothRace":
                                    //Formkey.Factory("00083A:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 2500;
                                    staminaOffsetPerLevel = 200;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    // 0FAB0B
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39EB:Requiem.esp"; //armor
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0B:Requiem.esp";

                                    break;
                                case "MudcrabRace":
                                    //Formkey.Factory("00083B:RequiemPatcherKeyword.esp");
                                    if (level >= 1) addedHealthPerLevel = 75;
                                    if (level >= 2)
                                    {
                                        addedHealthPerLevel = 250;
                                        Array.Resize(ref raceSpellsToDistribute, raceSpellsToDistribute.Length + 1);
                                        raceSpellsToDistribute[0] = "AD39EF:Requiem.esp"; //armor
                                    }

                                    if (level >= 3)
                                    {
                                        addedHealthPerLevel = 300;
                                        raceSpellsToDistribute[0] = "AD39EE:Requiem.esp"; //armor
                                    }

                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    doesScale = 0;
                                    racematch = 1;

                                    break;
                                case "DLC2NetchRace":
                                    //Formkey.Factory("00083C:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 2350;
                                    staminaOffsetPerLevel = 750;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 50;
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39EB:Fozars_Dragonborn_-_Requiem_Patch.esp"; //armor
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0B:Requiem.esp";

                                    break;
                                case "DLC2NetchCalfRace":
                                    //Formkey.Factory("00083D:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 1500;
                                    staminaOffsetPerLevel = 2000;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 38;
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "22888F:Fozars_Dragonborn_-_Requiem_Patch.esp"; //armor
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0B:Requiem.esp";

                                    break;
                                case "DLC2RieklingRace":
                                    //Formkey.Factory("00083E:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 80;
                                    staminaOffsetPerLevel = 150;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0B:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "22887F:Fozars_Dragonborn_-_Requiem_Patch.esp"; //armor

                                    break;
                                case "DLC2ThirskRieklingRace":


                                    //     formKeyNewRace = //Formkey.Factory("00083F:RequiemPatcherKeyword.esp");
                                    break;
                                case "SabreCatRace":
                                    //Formkey.Factory("000840:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 200;
                                    staminaOffsetPerLevel = 100;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    //0FAB0A
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0A:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39E3:Requiem.esp"; //armor

                                    break;
                                case "SabreCatSnowyRace":
                                    //Formkey.Factory("000841:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 175;
                                    staminaOffsetPerLevel = 150;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    //0FAB0A
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0A:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39E3:Requiem.esp"; //armor
                                    break;
                                case "SkeeverRace":
                                    //Formkey.Factory("000842:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 10;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;

                                    break;
                                case "DLC2AshHopperRace":
                                    //Formkey.Factory("000843:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 200;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 15;

                                    break;
                                case "SlaughterfishRace":
                                    //Formkey.Factory("000844:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 45;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;

                                    break;
                                case "DwarvenSphereRace":
                                    //Formkey.Factory("000845:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 250;
                                    staminaOffsetPerLevel = 150;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    //sphere: 0FAB0A cent03DFD0
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0A:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39DD:Requiem.esp"; //armor

                                    break;
                                case "SprigganRace":
                                    //Formkey.Factory("000846:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 175;
                                    magickaOffsetPerLevel = 50;
                                    staminaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39E8:Requiem.esp"; //armor


                                    break;
                                case "SprigganMatronRace":
                                    //Formkey.Factory("000847:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 275;
                                    magickaOffsetPerLevel = 400;
                                    staminaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39E8:Requiem.esp"; //armor

                                    break;
                                case "SprigganEarthMotherRace":
                                    //Formkey.Factory("000848:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 425;
                                    magickaOffsetPerLevel = 200;
                                    staminaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39E8:Requiem.esp"; //armor

                                    break;
                                case "DLC2SprigganBurntRace":
                                    //Formkey.Factory("000849:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 100;
                                    magickaOffsetPerLevel = 150;
                                    staminaOffsetPerLevel = 100;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39E8:Requiem.esp"; //armor


                                    break;
                                case "DwarvenCenturionRace":
                                    //Formkey.Factory("00084A:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 2600;
                                    staminaOffsetPerLevel = 150;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 60;
                                    vanillaOffset = 100;
                                    //03DFD0
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "03DFD0:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistribute, raceSpellsToDistribute.Length + 1);
                                    raceSpellsToDistribute[0] = "AD39DC:Requiem.esp"; //armor

                                    break;
                                case "TrollRace":
                                    //Formkey.Factory("00084B:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 350;
                                    staminaOffsetPerLevel = 175;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    //0FAB0A
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0B:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39E6:Requiem.esp"; //armor

                                    break;
                                case "TrollFrostRace":
                                    //Formkey.Factory("00084C:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 300;
                                    staminaOffsetPerLevel = 250;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    //0FAB0A
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0B:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39E6:Requiem.esp"; //armor

                                    break;
                                case "DLC1VampireBeastRace":
                                    // formKeyNewRace = //Formkey.Factory("00084D:RequiemPatcherKeyword.esp");
                                    break;
                                case "DLC1GargoyleVariantBossRace":
                                    //Formkey.Factory("00084E:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 100;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 50;
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0B:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39F0:Requiem.esp"; //armor


                                    break;
                                case "DLC1GargoyleVariantGreenRace":
                                    //Formkey.Factory("00084F:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 100;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 35;
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0B:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39F0:Requiem.esp"; //armor

                                    break;
                                case "DLC1GargoyleRace":
                                    //Formkey.Factory("000850:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 100;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 35;
                                    vanillaOffset = 100;
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0B:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "AD39F0:Requiem.esp"; //armor

                                    break;
                                case "WerewolfBeastRace":
                                    //Formkey.Factory("000851:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 100;
                                    staminaOffsetPerLevel = 900;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 50;

                                    break;
                                case "DLC2WerebearBeastRace":
                                    //Formkey.Factory("000852:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 1500;
                                    staminaOffsetPerLevel = 1500;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 70;

                                    break;
                                case "WispRace":
                                    //Formkey.Factory("000853:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 750;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 250;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    vanillaOffset = 500;

                                    break;
                                case "WitchlightRace":
                                    //Formkey.Factory("000854:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 50;
                                    staminaOffsetPerLevel = 0;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;

                                    break;
                                case "WolfRace":
                                    //   formKeyNewRace = //Formkey.Factory("000855:RequiemPatcherKeyword.esp");
                                    break;
                                case "C06WolfSpiritRace":
                                    // formKeyNewRace = //Formkey.Factory("000856:RequiemPatcherKeyword.esp");
                                    break;
                                case "DLC2DwarvenBallistaRace":
                                    // formKeyNewRace = //Formkey.Factory("000856:RequiemPatcherKeyword.esp");
                                    addedHealthPerLevel = 250;
                                    staminaOffsetPerLevel = 100;
                                    magickaOffsetPerLevel = 0;
                                    level = 1;
                                    racematch = 1;
                                    doesScale = 0;
                                    delevelToSet = 32;
                                    vanillaOffset = 0;
                                    //03DFD0
                                    Array.Resize(ref racePerksToDistribute, racePerksToDistribute.Length + 1);
                                    racePerksToDistribute[0] = "0FAB0A:Requiem.esp";
                                    Array.Resize(ref raceSpellsToDistributNEw, raceSpellsToDistributNEw.Length + 1);
                                    raceSpellsToDistributNEw[0] = "228877:Fozars_Dragonborn_-_Requiem_Patch.esp"; //armor
                                    break;
                            }


                    double oGhealthoffset = npc.Configuration.HealthOffset;
                    double oGstaminaoffset = npc.Configuration.StaminaOffset;
                    double ogMagickoffset = npc.Configuration.MagickaOffset;

                    var neWhealthoffset = oGhealthoffset;
                    var neWstaminaoffset = oGstaminaoffset;
                    var newMagickoffset = ogMagickoffset;

                    var hasPcLevelMult = 0;
                    double actorLevel = 0;
                    if (npc.Configuration.Level is IPcLevelMult)
                    {
                        actorLevel = npc.Configuration.CalcMinLevel;
                        hasPcLevelMult = 1;
                        // maxLevel = npc.Configuration.CalcMaxLevel;
                    }
                    else
                    {
                        actorLevel = ((INpcLevelGetter)npc.Configuration.Level).Level;
                    }


                    ////CALCULATE ATTRIBUTE RESCALE FOR PCLevelMult NPC FROM non-STATIC RACE
                 //   if (hasPcLevelMult == 1)
                        if (doesScale == 1)
                        {
                            /////////////////////////////////////////////////////////////////////////////HEALTH
                            if (oGhealthoffset >= addedHealthPerLevel * (actorLevel - 1))
                                neWhealthoffset = oGhealthoffset - addedHealthPerLevel * (actorLevel - 1);
                            if (oGhealthoffset < addedHealthPerLevel * (actorLevel - 1)) neWhealthoffset = 0;
                            //NEWhealthoffset = (addedHealthPerLevel * (actor_LEVEL - 1));
                            /////////////////////////////////////////////////////////////////////////////MAGICKA
                            if (ogMagickoffset >= magickaOffsetPerLevel * (actorLevel - 1) + mageIntercept)
                                newMagickoffset = ogMagickoffset -
                                                  (magickaOffsetPerLevel * (actorLevel - 1) + mageIntercept);
                            if (ogMagickoffset < magickaOffsetPerLevel * (actorLevel - 1) + mageIntercept)
                                newMagickoffset = 0;
                            //NEWhealthoffset = (addedHealthPerLevel * (actor_LEVEL - 1));
                            /////////////////////////////////////////////////////////////////////////////STAMINA
                            if (oGstaminaoffset >= staminaOffsetPerLevel * (actorLevel - 1))
                                neWstaminaoffset = oGstaminaoffset - staminaOffsetPerLevel * (actorLevel - 1);
                            if (oGstaminaoffset < staminaOffsetPerLevel * (actorLevel - 1)) neWstaminaoffset = 0;
                            //NEWhealthoffset = (addedHealthPerLevel * (actor_LEVEL - 1));
                        }

                    ////CALCULATE ATTRIBUTE RESCALE FOR non-PCLevelMult NPC FROM non-STATIC RACE
                   //if (hasPcLevelMult == 0)
                   //    if (doesScale == 1)
                   //    {
                   //        /////////////////////////////////////////////////////////////////////////////HEALTH
                   //        if (oGhealthoffset >= addedHealthPerLevel * (actorLevel - 1)) neWhealthoffset = oGhealthoffset;
                   //        if (oGhealthoffset < addedHealthPerLevel * (actorLevel - 1))
                   //            neWhealthoffset = addedHealthPerLevel * (actorLevel - 1);
                   //        /////////////////////////////////////////////////////////////////////////////MAGICKA
                   //        if (ogMagickoffset >= magickaOffsetPerLevel * (actorLevel - 1) + mageIntercept)
                   //            newMagickoffset = ogMagickoffset -
                   //                              (magickaOffsetPerLevel * (actorLevel - 1) + mageIntercept);
                   //        if (ogMagickoffset < magickaOffsetPerLevel * (actorLevel - 1) + mageIntercept)
                   //            newMagickoffset = magickaOffsetPerLevel * (actorLevel - 1) + mageIntercept;
                   //        /////////////////////////////////////////////////////////////////////////////STAMINA
                   //        if (oGstaminaoffset >= staminaOffsetPerLevel * (actorLevel - 1))
                   //            neWstaminaoffset = oGstaminaoffset - staminaOffsetPerLevel * (actorLevel - 1);
                   //        if (oGstaminaoffset < staminaOffsetPerLevel * (actorLevel - 1))
                   //            neWstaminaoffset = staminaOffsetPerLevel * (actorLevel - 1);
                   //    }

                    ////CALCULATE ATTRIBUTE RESCALE FOR NPC FROM STATIC RACE
                    if (doesScale == 0)
                    {
                        /////////////////////////////////////////////////////////////////////////////HEALTH
                        neWhealthoffset = oGhealthoffset - vanillaOffset + addedHealthPerLevel;

                        /////////////////////////////////////////////////////////////////////////////MAGICKA
                        newMagickoffset = ogMagickoffset + magickaOffsetPerLevel;

                        /////////////////////////////////////////////////////////////////////////////STAMINA
                        neWstaminaoffset = oGstaminaoffset + staminaOffsetPerLevel;
                    }

                    ////CALCULATE ATTRIBUTE RESCALE FOR VAMPIRES
                    if (vampirematch == 1)

                    {
                       // if (hasPcLevelMult == 1)
                       // {
                            /////////////////////////////////////////////////////////////////////////////HEALTH
                            if (oGhealthoffset >= addedHealthPerLevel + addToPresentOffset)
                                neWhealthoffset = oGhealthoffset - (addedHealthPerLevel + addToPresentOffset);
                            if (oGhealthoffset < addedHealthPerLevel + addToPresentOffset) neWhealthoffset = 0;
                      //  }

                       // if (hasPcLevelMult == 0)
                       // {
                       //     /////////////////////////////////////////////////////////////////////////////HEALTH
                       //     if (oGhealthoffset >= addedHealthPerLevel + addToPresentOffset)
                       //         neWhealthoffset = oGhealthoffset - addedHealthPerLevel + addToPresentOffset;
                       //     if (oGhealthoffset < addedHealthPerLevel + addToPresentOffset)
                       //         neWhealthoffset = addedHealthPerLevel + addToPresentOffset;
                       // }

                        /////////////////////////////////////////////////////////////////////////////MAGICKA
                        if (ogMagickoffset >= magickaOffsetPerLevel) newMagickoffset = ogMagickoffset;
                        if (ogMagickoffset < magickaOffsetPerLevel) newMagickoffset = magickaOffsetPerLevel;
                        /////////////////////////////////////////////////////////////////////////////STAMINA
                        if (oGstaminaoffset >= staminaOffsetPerLevel) neWstaminaoffset = oGstaminaoffset;
                        if (oGstaminaoffset < staminaOffsetPerLevel) neWstaminaoffset = staminaOffsetPerLevel;
                    }

                    ////CALCULATE ATTRIBUTE RESCALE FOR DRAUGR AND FALMER
                    if (draugrmatch == 1 || falmerMatch == 1)
                    {
                       // if (hasPcLevelMult == 1)
                       // {
                            /////////////////////////////////////////////////////////////////////////////HEALTH
                            if (oGhealthoffset >= addedHealthPerLevel + addToPresentOffset)
                                neWhealthoffset = oGhealthoffset - (addedHealthPerLevel + addToPresentOffset);
                            if (oGhealthoffset < addedHealthPerLevel + addToPresentOffset) neWhealthoffset = 0;
                            /////////////////////////////////////////////////////////////////////////////MAGICKA
                            if (ogMagickoffset >= magickaOffsetPerLevel * (actorLevel - 1) + mageIntercept)
                                newMagickoffset = ogMagickoffset -
                                                  (magickaOffsetPerLevel * (actorLevel - 1) + mageIntercept);
                            if (ogMagickoffset < magickaOffsetPerLevel * (actorLevel - 1) + mageIntercept)
                                newMagickoffset = 0;
                            //NEWhealthoffset = (addedHealthPerLevel * (actor_LEVEL - 1));
                            /////////////////////////////////////////////////////////////////////////////STAMINA
                            if (oGstaminaoffset >= staminaOffsetPerLevel * (actorLevel - 1))
                                neWstaminaoffset = oGstaminaoffset - staminaOffsetPerLevel * (actorLevel - 1);
                            if (oGstaminaoffset < staminaOffsetPerLevel * (actorLevel - 1)) neWstaminaoffset = 0;
                            //NEWhealthoffset = (addedHealthPerLevel * (actor_LEVEL - 1));
                      //  }

                       //if (hasPcLevelMult == 0)
                       //{
                       //    /////////////////////////////////////////////////////////////////////////////HEALTH
                       //    if (oGhealthoffset >= addedHealthPerLevel + addToPresentOffset)
                       //        neWhealthoffset = oGhealthoffset - addedHealthPerLevel + addToPresentOffset;
                       //    if (oGhealthoffset < addedHealthPerLevel + addToPresentOffset)
                       //        neWhealthoffset = addedHealthPerLevel + addToPresentOffset;
                       //    /////////////////////////////////////////////////////////////////////////////MAGICKA
                       //    if (ogMagickoffset >= magickaOffsetPerLevel * (actorLevel - 1) + mageIntercept)
                       //        newMagickoffset = ogMagickoffset -
                       //                          (magickaOffsetPerLevel * (actorLevel - 1) + mageIntercept);
                       //    if (ogMagickoffset < magickaOffsetPerLevel * (actorLevel - 1) + mageIntercept)
                       //        newMagickoffset = magickaOffsetPerLevel * (actorLevel - 1) + mageIntercept;
                       //    /////////////////////////////////////////////////////////////////////////////STAMINA
                       //    if (oGstaminaoffset >= staminaOffsetPerLevel * (actorLevel - 1))
                       //        neWstaminaoffset = oGstaminaoffset - staminaOffsetPerLevel * (actorLevel - 1);
                       //    if (oGstaminaoffset < staminaOffsetPerLevel * (actorLevel - 1))
                       //        neWstaminaoffset = staminaOffsetPerLevel * (actorLevel - 1);
                       //}
                    }

                    ////CALCULATE ATTRIBUTE RESCALE FOR DRAGONS
                    if (npcIsADragon == 1)
                        if (oGhealthoffset >= 0)
                            neWhealthoffset = oGhealthoffset * 0.3;

                    ////DO NOT RESCALE IF ORIGINAL OFFSET IS NEGATIVE
                    var hasNegativeOffset = 0;
                    if (oGhealthoffset < 0)
                    {
                        neWhealthoffset = oGhealthoffset;
                        hasNegativeOffset = 1;
                    }

                    if (ogMagickoffset < 0) newMagickoffset = ogMagickoffset;

                    uint hasUseKeywords = 0;
                    uint hasUseSpellList = 0; // (both spells and perks)
                    uint hasUseStats = 0; // (Stats tab, including level, autocalc, skills, health/magicka/stamina, speed, bleedout, class)
                    uint hasVanillaTemplate = 0;
                    uint inheritsStatsFromVanillaTemplate = 0;
                    uint hasVanillaPerksAndSpells = 0;
                    int inheritsPerksAndSpellsFromTemplate = 0;
                    var templateNPCGetter = npc;
                    int runTimes = 0;
                    int runTimesInner = 0;
                    int foundUseSpells = 0;
                    int foundUseStats = 0;
                    //uint manRemoved = 0;
                    if (!npc.Template.IsNull)
                    {
                        // state.LoadOrder.PriorityOrder.LeveledNpc
                        if (npc.Configuration.TemplateFlags.HasFlag(NpcConfiguration.TemplateFlag.Keywords)) hasUseKeywords++;
                        if (npc.Configuration.TemplateFlags.HasFlag(NpcConfiguration.TemplateFlag.SpellList)) hasUseSpellList++;
                        if (npc.Configuration.TemplateFlags.HasFlag(NpcConfiguration.TemplateFlag.Stats)) hasUseStats++;

                    var templateThing = npc.Template;
                    var npcTemplateGetter = templateThing.Resolve(state.LinkCache);

                    int templateFromNewMod = 0;
                    foreach (var selectedPlugin in npcGroups.Select(x => x.ModKey.FileName))
                    {
                        if (modKey == npcTemplateGetter.FormKey.ModKey.FileName)
                            templateFromNewMod = 1;

                    }
                    if (templateFromNewMod == 0)
                    {
                        hasVanillaTemplate = 1;
                    }

                    if(hasUseStats == 1 && hasVanillaTemplate == 1)
                    {
                        inheritsStatsFromVanillaTemplate = 1;
                    }
                    if (hasUseSpellList == 1 && hasVanillaTemplate == 1)
                    {
                        inheritsPerksAndSpellsFromTemplate = 1;
                    }




                }
                

                FormKey formKeyActorRebalancedForRequiem = FormKey.Factory("000802:RequiemPatcherKeyword.esp");
                FormKey formKeyActorRebalancedForRequiemHealth = FormKey.Factory("0008E3:RequiemPatcherKeyword.esp");
                FormKey formKeyActorRebalancedForRequiemPerks = FormKey.Factory("0008DF:RequiemPatcherKeyword.esp");
                FormKey formKeyReqClassIsPureMageMismatch = FormKey.Factory("0008E0:RequiemPatcherKeyword.esp");
                FormKey formKeyReqClassIWarriorMismatch = FormKey.Factory("0008E0:RequiemPatcherKeyword.esp");
                formKeyPureMage = FormKey.Factory("000857:RequiemPatcherKeyword.esp");
                    formKeyBattleMage = FormKey.Factory("000858:RequiemPatcherKeyword.esp");
                    formKeyWarrior = FormKey.Factory("000859:RequiemPatcherKeyword.esp");
                    //Console.WriteLine(count);
                  //  racematch = 1;
                    if (racematch > 0)
                    {
                    var modifiedNpc = state.PatchMod.Npcs.GetOrAddAsOverride(npc);

                   

                    if (hasUseKeywords == 1){ forceKeyWord += ",0x00" + modifiedNpc.FormKey.ToString().Replace(":", "~"); }



                    if (pureMageMismatch == 1 || warriorMismatch == 1)
                    {
                        var npcClassGetter = npc.Class.Resolve(state.LinkCache);
                        var newClass = state.PatchMod.Classes.DuplicateInAsNewRecord(npcClassGetter);
                       // string newClassForm = newClass.FormKey.ToString();

                       // IFormLinkGetter<ISpellRecordGetter>
                       // IFormLinkGetter<IClassGetter> newClassGetter = FormKey.Factory(newClassForm);


                        if (pureMageMismatch == 1)
                        {
                            newClass.EditorID = npcClassGetter.EditorID + npc.EditorID + "W";
                            //modifiedNpc.Keywords ??= new();
                            //modifiedNpc.Keywords.Add(formKeyReqClassIsPureMageMismatch);

                            classIsBattleMage += ",0x00" + newClass.FormKey.ToString().Replace(":", "~");



                            //  if (hasUseKeywords == 1) { forceKeyWordPMMismatch += modifiedNpc.FormKey.ToString().Replace(":", "~"); }
                        }
                        if (warriorMismatch == 1)
                        {
                            newClass.EditorID = npcClassGetter.EditorID + npc.EditorID + "W";
                            // modifiedNpc.Keywords ??= new();
                            //modifiedNpc.Keywords.Add(formKeyReqClassIWarriorMismatch);
                            classIsBattleMage += ",0x00" + newClass.FormKey.ToString().Replace(":", "~");

                            // if (hasUseKeywords == 1) { forceKeyWordWMismatch += modifiedNpc.FormKey.ToString().Replace(":", "~"); }
                        }

                        modifiedNpc.Class.SetTo(newClass.FormKey);
                        //modifiedNpc.Class = modifiedNpc.Class.SetTo(FormKey.Factory(newClassForm));
                        switch (npcClassHealthPerLevel)
                        {
                            case 0.0:
                                //Console.WriteLine("Closest value is 0.0");
                                break;
                            case 1.0:

                                //Console.WriteLine("Closest value is 1.0");

                                classString1 += ",0x00" + newClass.FormKey.ToString().Replace(":", "~");

                                break;
                            case 1.25:


                                classString2 += ",0x00" + newClass.FormKey.ToString().Replace(":", "~");

                                break;
                            case 1.428571:

                                classString3 += ",0x00" + newClass.FormKey.ToString().Replace(":", "~");

                                break;

                            case 1.5:
                                //Console.WriteLine("5");

                                classString4 += ",0x00" + newClass.FormKey.ToString().Replace(":", "~");

                                break;
                            case 1.666667:
                                //Console.WriteLine("666667");

                                classString5 += ",0x00" + newClass.FormKey.ToString().Replace(":", "~");

                                break;
                            case 2.0:
                                //Console.WriteLine("0");

                                classString6 += ",0x00" + newClass.FormKey.ToString().Replace(":", "~");

                                break;
                            case 2.5:
                                //Console.WriteLine("5");

                                classString7 += ",0x00" + newClass.FormKey.ToString().Replace(":", "~");

                                break;
                            case 2.857143:
                                //Console.WriteLine("857143");

                                classString8 += ",0x00" + newClass.FormKey.ToString().Replace(":", "~");

                                break;
                            case 3.0:
                                //Console.WriteLine("0");

                                classString9 += ",0x00" + newClass.FormKey.ToString().Replace(":", "~");

                                break;
                            case 3.125:
                                //Console.WriteLine("125");

                                classString10 += ",0x00" + newClass.FormKey.ToString().Replace(":", "~");

                                break;
                            case 3.333333:
                                //Console.WriteLine("333333");

                                classString11 += ",0x00" + newClass.FormKey.ToString().Replace(":", "~");

                                break;
                            case 4.0:
                                //Console.WriteLine("0");

                                classString12 += ",0x00" + newClass.FormKey.ToString().Replace(":", "~");



                                break;
                            case 5.0:

                                classString13 += ",0x00" + newClass.FormKey.ToString().Replace(":", "~");

                                break;
                        }

                    }




                    if (!npc.Template.IsNull)
                    {
                        if (inheritsPerksAndSpellsFromTemplate == 0)
                        {
                            // modifiedNpc.Keywords ??= new();
                            // modifiedNpc.Keywords.Add(formKeyActorRebalancedForRequiemPerks); //needs this keyword for spid to distribute spells and perks
                            forceKeyWordSpells += ",0x00" + modifiedNpc.FormKey.ToString().Replace(":", "~");

                            //  if (hasUseKeywords == 1) { forceKeyWordSpells += modifiedNpc.FormKey.ToString().Replace(":", "~"); }
                        }


                        if (inheritsStatsFromVanillaTemplate == 1)
                        {
                            //modifiedNpc.Keywords ??= new();
                            //modifiedNpc.Keywords.Add(formKeyActorRebalancedForRequiemHealth);//needs this keyword for spid to distribute health scaling spells
                            forceKeyWordHealth += ",0x00" + modifiedNpc.FormKey.ToString().Replace(":", "~");
                            //if (hasUseKeywords == 1) { forceKeyWordHealth += modifiedNpc.FormKey.ToString().Replace(":", "~"); }
                        }
                    }



                     
                if(inheritsPerksAndSpellsFromTemplate == 0 || inheritsStatsFromVanillaTemplate == 0)
                    {
                        modifiedNpc.Keywords ??= new();
                        modifiedNpc.Keywords.Add(formKeyActorRebalancedForRequiem);
                    }

                    
                   

                    ////////////////////////////////RELEVEL AND RESCALE ATTRIBUTES
                    //     if (hasUseStats == 0)
                    //    {
                    ////////////////////////////////BEGIN RELEVEL AND RESCALE ATTRIBUTES
                    //Relevel non-PCLevelMult or NPC from STATIC Race group to Requiem's Standard
                    if (doesScale == 0 || hasPcLevelMult < 1)
                        {
                            if (currentLevel > delevelToSet) delevelToSet = (short)currentLevel;


                            modifiedNpc.Configuration.Level = new NpcLevel { Level = delevelToSet };
                        }

                        //Relevel PCLevelMult NPC from non-STATIC Race group to Requiem's Standard
                        if (modifiedNpc.Configuration.Level is IPcLevelMult && doesScale == 1)
                            if (currentLevel < delevelToSet)
                            {
                                if (maxLevel <= delevelToSet)
                                    modifiedNpc.Configuration.CalcMinLevel = (short)maxLevel;

                                else
                                    modifiedNpc.Configuration.CalcMinLevel = delevelToSet;
                            }

                    //      if(doesScale == 0)
                    //  {
                    //      modifiedNpc.Configuration.TemplateFlags = modifiedNpc.Configuration.TemplateFlags.SetFlag(NpcConfiguration.TemplateFlag.Stats, false);
                    //  }
                    //
                  

                        if (hasUseStats == 0 && hasPcLevelMult < 1)
                        {
                            if (!(modifiedNpc.Configuration.Flags.HasFlag(NpcConfiguration.Flag.AutoCalcStats)))
                            {
                                ignoreNPC += ",0x00" + modifiedNpc.FormKey.ToString().Replace(":", "~"); ;
                            }
                        }


                    


                    //Assign New Health Offsets
                    modifiedNpc.Configuration.HealthOffset = (short)neWhealthoffset;
                        modifiedNpc.Configuration.StaminaOffset = (short)neWstaminaoffset;
                        modifiedNpc.Configuration.MagickaOffset = (short)newMagickoffset;
                        ////////////////////////////////END RELEVEL AND RESCALE ATTRIBUTES
                        // }


                        ////////////////////////////////ADD PERKS
                        //   if (hasUseSpellList == 0)
                        // {
                        ////////////////////////////////BEGIN ADD PERKS
    
                        // if (didsomething == 1)
                        // {
                        //     count++;
                        // }
                        ////////////////////////////////END ADD PERKS
                        //  }
                        //end


                    }



                        //////////////////////////////// REMOVE STATS ADDED BY AUTOCALCSTATS IF NOT PCLEVELMULT
                        //if (hasUseStats == 0)
                        ////////////////////////////////BEGIN REMOVE STATS ADDED BY AUTOCALCSTATS IF NOT PCLEVELMULT
                        // if (modifiedNpc.Configuration.Level is not IPcLevelMult)
                        //     if (modifiedNpc.Configuration.Flags.HasFlag(NpcConfiguration.Flag.AutoCalcStats))
                        //     {
                        //         //&& modifiedNpc.Configuration.Level is not IPcLevelMult
                        //         double levelAuto = ((INpcLevelGetter)modifiedNpc.Configuration.Level).Level;
                        //         var newerOffsetH = neWhealthoffset - classHSlope * (levelAuto - 1);
                        //         var newerOffsetM = newMagickoffset - classMSlope * (levelAuto - 1);
                        //         var newerOffsetS = neWstaminaoffset - classSSlope * (levelAuto - 1);
                        //
                        //         if (hasNegativeOffset == 0)
                        //             modifiedNpc.Configuration.HealthOffset = (short)newerOffsetH;
                        //
                        //         modifiedNpc.Configuration.StaminaOffset = (short)newerOffsetS;
                        //         modifiedNpc.Configuration.MagickaOffset = (short)newerOffsetM;
                        //     }
                        ////////////////////////////////END REMOVE STATS ADDED BY AUTOCALCSTATS IF NOT PCLEVELMULT
                        //}
                    
                    //END IF RACEMATCH
                }
            }

    WriteToIniFile(outputPath, "Keyword = reqRebalanceDerivedPlayable|ElderRace+ActorRebalancedForRequiem,-Vampire");
        WriteToIniFile(outputPath, $";KeywordActorRebalancedForRequiem ");
        WriteToIniFile(outputPath, "Keyword = ActorRebalancedForRequiem|NONE|" + forceKeyWord?.Substring(1));
        WriteToIniFile(outputPath, $";Keyword reqClassIsWarrior");
        WriteToIniFile(outputPath, "Keyword = reqClassIsWarrior|ActorRebalancedForRequiem|" + classIsWarrior?.Substring(1));
        WriteToIniFile(outputPath, $";Keyword reqClassIsBattleMage");
        WriteToIniFile(outputPath, "Keyword = reqClassIsBattleMage|ActorRebalancedForRequiem|" + classIsBattleMage?.Substring(1));
        WriteToIniFile(outputPath, $";Keyword reqClassIsPureMage");
        WriteToIniFile(outputPath, "Keyword = reqClassIsPureMage|ActorRebalancedForRequiem|" + classIsPureMage?.Substring(1));

       //WriteToIniFile(outputPath, $";Keyword reqRebalanceUsesMagic");
       //WriteToIniFile(outputPath, "Keyword = reqRebalanceUsesMagic|+reqClassIsBattleMage,reqClassIsPureMage|");

        

        WriteToIniFile(outputPath, $";Keyword reqRaceIsDefaultRace");
        WriteToIniFile(outputPath, "Keyword = reqRaceIsDefaultRace|-Vampire|" + playableRace?.Substring(1));
       // WriteToIniFile(outputPath, $";Keyword reqRebalanceDerivedPlayable");
       // WriteToIniFile(outputPath, "Keyword = reqRebalanceDerivedPlayable|reqRaceIsDefaultRace+ActorRebalancedForRequiem,-Vampire");

        //ignore these npcs
        WriteToIniFile(outputPath, $";Keyword reqRebalanceIgnoreNegativeOffset");
        WriteToIniFile(outputPath, "Keyword = reqRebalanceIgnoreNegativeOffset|NONE|" + ignoreNPC?.Substring(1));
        WriteToIniFile(outputPath, $";Keyword reqRebalanceIgnorePerks");
        WriteToIniFile(outputPath, "Keyword = reqRebalanceIgnorePerks|NONE|" + forceKeyWordSpells?.Substring(1));
        WriteToIniFile(outputPath, $";Keyword reqRebalanceIgnoreHealth");
        WriteToIniFile(outputPath, "Keyword = reqRebalanceIgnoreHealth|NONE|" + forceKeyWordHealth?.Substring(1));



       // WriteToIniFile(outputPath, $";Health Warrior");
       // WriteToIniFile(outputPath, "Spell = 0x88C~RequiemPatcherKeyword.esp|reqClassIsWarrior+reqRebalanceDerivedPlayable,reqClassIsBattleMage+reqRebalanceDerivedPlayable,-reqRebalanceIgnoreHealth");
       //
       // WriteToIniFile(outputPath, $";Health PureMage");
       // WriteToIniFile(outputPath, "Spell = 0x8AB~RequiemPatcherKeyword.esp|reqClassIsPureMage+reqRebalanceDerivedPlayable,-reqRebalanceIgnoreHealth");
       //
       // WriteToIniFile(outputPath, $";Stamina");
       // WriteToIniFile(outputPath, $"Spell = 0x8AA~RequiemPatcherKeyword.esp|reqClassIsWarrior+reqRebalanceDerivedPlayable,reqClassIsBattleMage+reqRebalanceDerivedPlayable,+ActorRebalancedForRequiem,reqRaceIsFalmerRace,reqRaceIsDraugrRace,-reqRebalanceIgnoreHealth|FalmerRace,DraugrRace");
       //
       // WriteToIniFile(outputPath, $";Magicka");
       // WriteToIniFile(outputPath, $"Spell = 0x8A9~RequiemPatcherKeyword.esp|+reqRebalanceUsesMagic,reqClassIsPureMage+reqRebalanceDerivedPlayable,reqClassIsBattleMage+reqRebalanceDerivedPlayable,+ActorRebalancedForRequiem,reqRaceIsFalmerRace,reqRaceIsDraugrRace,-reqRebalanceIgnoreHealth|FalmerRace,DraugrRace");
       //
       // WriteToIniFile(outputPath, $";Health Draugr");
       // WriteToIniFile(outputPath, $"Spell = 0x891~RequiemPatcherKeyword.esp|+ActorRebalancedForRequiem,reqRaceIsDraugrRace,-reqRebalanceIgnoreHealth|DraugrRace");
       //
       // WriteToIniFile(outputPath, $";Health Falmer");
       // WriteToIniFile(outputPath, $"Spell = 0x896~RequiemPatcherKeyword.esp|+ActorRebalancedForRequiem,reqRaceIsFalmerRace,-reqRebalanceIgnoreHealth|FalmerRace");
       //
       // WriteToIniFile(outputPath, $";Health Vampire");
       // WriteToIniFile(outputPath, $"Spell = 0x8A5~RequiemPatcherKeyword.esp|+ActorRebalancedForRequiem,+Vampire,-reqRebalanceIgnoreHealth");
       //
        //negative offset spells
        WriteToIniFile(outputPath, $";Negative Offset Spells");
        if (classString1 != null) WriteToIniFile(outputPath, "Spell = 0x8BA~RequiemPatcherKeyword.esp|ActorRebalancedForRequiem,-reqRebalanceIgnoreNegativeOffset|"+ classString1?.Substring(1));
        if (classString2 != null) WriteToIniFile(outputPath, "Spell = 0x8AF~RequiemPatcherKeyword.esp|ActorRebalancedForRequiem,-reqRebalanceIgnoreNegativeOffset|"+ classString2?.Substring(1));
        if (classString3 != null) WriteToIniFile(outputPath, "Spell = 0x8B4~RequiemPatcherKeyword.esp|ActorRebalancedForRequiem,-reqRebalanceIgnoreNegativeOffset|"+ classString3?.Substring(1));
        if (classString4 != null) WriteToIniFile(outputPath, "Spell = 0x8B7~RequiemPatcherKeyword.esp|ActorRebalancedForRequiem,-reqRebalanceIgnoreNegativeOffset|"+ classString4?.Substring(1));
        if (classString5 != null) WriteToIniFile(outputPath, "Spell = 0x8B8~RequiemPatcherKeyword.esp|ActorRebalancedForRequiem,-reqRebalanceIgnoreNegativeOffset|"+ classString5?.Substring(1));
        if (classString6 != null) WriteToIniFile(outputPath, "Spell = 0x8B5~RequiemPatcherKeyword.esp|ActorRebalancedForRequiem,-reqRebalanceIgnoreNegativeOffset|"+ classString6?.Substring(1));
        if (classString7 != null) WriteToIniFile(outputPath, "Spell = 0x8B6~RequiemPatcherKeyword.esp|ActorRebalancedForRequiem,-reqRebalanceIgnoreNegativeOffset|"+ classString7?.Substring(1));
        if (classString8 != null) WriteToIniFile(outputPath, "Spell = 0x8B2~RequiemPatcherKeyword.esp|ActorRebalancedForRequiem,-reqRebalanceIgnoreNegativeOffset|"+ classString8?.Substring(1));
        if (classString9 != null) WriteToIniFile(outputPath, "Spell = 0x8B3~RequiemPatcherKeyword.esp|ActorRebalancedForRequiem,-reqRebalanceIgnoreNegativeOffset|"+ classString9?.Substring(1));
       if (classString10 != null) WriteToIniFile(outputPath, "Spell = 0x8B1~RequiemPatcherKeyword.esp|ActorRebalancedForRequiem,-reqRebalanceIgnoreNegativeOffset|"+ classString10?.Substring(1));
       if (classString11 != null) WriteToIniFile(outputPath, "Spell = 0x8B9~RequiemPatcherKeyword.esp|ActorRebalancedForRequiem,-reqRebalanceIgnoreNegativeOffset|"+ classString11?.Substring(1));
       if (classString12 != null) WriteToIniFile(outputPath, "Spell = 0x8AD~RequiemPatcherKeyword.esp|ActorRebalancedForRequiem,-reqRebalanceIgnoreNegativeOffset|" + classString12?.Substring(1));
       if (classString13 != null) WriteToIniFile(outputPath, "Spell = 0x8AC~RequiemPatcherKeyword.esp|ActorRebalancedForRequiem,-reqRebalanceIgnoreNegativeOffset|" + classString13?.Substring(1));
       // //forceKeyWord
       // WriteToIniFile(outputPath, $";Force Keyword");
       // WriteToIniFile(outputPath, $"0x8A9~RequiemPatcherKeyword.esp|NONE|" + forceKeyWord?.Substring(1));

    }
}
